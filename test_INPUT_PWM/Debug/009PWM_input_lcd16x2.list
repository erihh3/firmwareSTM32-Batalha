
009PWM_input_lcd16x2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ce8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08003e88  08003e88  00013e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003efc  08003efc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003efc  08003efc  00013efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f04  08003f04  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f04  08003f04  00013f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f08  08003f08  00013f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003f0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000118  20000070  08003f7c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08003f7c  00020188  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c5fb  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a54  00000000  00000000  0002c69b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c50  00000000  00000000  0002e0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba0  00000000  00000000  0002ed40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016483  00000000  00000000  0002f8e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000090ff  00000000  00000000  00045d63  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008c43c  00000000  00000000  0004ee62  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000db29e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003730  00000000  00000000  000db31c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003e70 	.word	0x08003e70

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003e70 	.word	0x08003e70

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x7E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af02      	add	r7, sp, #8
 8000586:	4603      	mov	r3, r0
 8000588:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800058a:	79fb      	ldrb	r3, [r7, #7]
 800058c:	f023 030f 	bic.w	r3, r3, #15
 8000590:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000592:	79fb      	ldrb	r3, [r7, #7]
 8000594:	011b      	lsls	r3, r3, #4
 8000596:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	f043 030c 	orr.w	r3, r3, #12
 800059e:	b2db      	uxtb	r3, r3
 80005a0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80005a2:	7bfb      	ldrb	r3, [r7, #15]
 80005a4:	f043 0308 	orr.w	r3, r3, #8
 80005a8:	b2db      	uxtb	r3, r3
 80005aa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80005ac:	7bbb      	ldrb	r3, [r7, #14]
 80005ae:	f043 030c 	orr.w	r3, r3, #12
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005b6:	7bbb      	ldrb	r3, [r7, #14]
 80005b8:	f043 0308 	orr.w	r3, r3, #8
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005c0:	f107 0208 	add.w	r2, r7, #8
 80005c4:	2364      	movs	r3, #100	; 0x64
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2304      	movs	r3, #4
 80005ca:	217e      	movs	r1, #126	; 0x7e
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <lcd_send_cmd+0x5c>)
 80005ce:	f001 f94d 	bl	800186c <HAL_I2C_Master_Transmit>
}
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	200000ac 	.word	0x200000ac

080005e0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b086      	sub	sp, #24
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	f023 030f 	bic.w	r3, r3, #15
 80005f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	011b      	lsls	r3, r3, #4
 80005f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005f8:	7bfb      	ldrb	r3, [r7, #15]
 80005fa:	f043 030d 	orr.w	r3, r3, #13
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000602:	7bfb      	ldrb	r3, [r7, #15]
 8000604:	f043 0309 	orr.w	r3, r3, #9
 8000608:	b2db      	uxtb	r3, r3
 800060a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800060c:	7bbb      	ldrb	r3, [r7, #14]
 800060e:	f043 030d 	orr.w	r3, r3, #13
 8000612:	b2db      	uxtb	r3, r3
 8000614:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000616:	7bbb      	ldrb	r3, [r7, #14]
 8000618:	f043 0309 	orr.w	r3, r3, #9
 800061c:	b2db      	uxtb	r3, r3
 800061e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000620:	f107 0208 	add.w	r2, r7, #8
 8000624:	2364      	movs	r3, #100	; 0x64
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2304      	movs	r3, #4
 800062a:	217e      	movs	r1, #126	; 0x7e
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <lcd_send_data+0x5c>)
 800062e:	f001 f91d 	bl	800186c <HAL_I2C_Master_Transmit>
}
 8000632:	bf00      	nop
 8000634:	3710      	adds	r7, #16
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200000ac 	.word	0x200000ac

08000640 <lcd_clear>:

void lcd_clear (void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000646:	2080      	movs	r0, #128	; 0x80
 8000648:	f7ff ff9a 	bl	8000580 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800064c:	2300      	movs	r3, #0
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	e005      	b.n	800065e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000652:	2020      	movs	r0, #32
 8000654:	f7ff ffc4 	bl	80005e0 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	3301      	adds	r3, #1
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	2b45      	cmp	r3, #69	; 0x45
 8000662:	ddf6      	ble.n	8000652 <lcd_clear+0x12>
	}
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
    switch (row)
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d002      	beq.n	8000682 <lcd_put_cur+0x16>
 800067c:	2b01      	cmp	r3, #1
 800067e:	d005      	beq.n	800068c <lcd_put_cur+0x20>
 8000680:	e009      	b.n	8000696 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000688:	603b      	str	r3, [r7, #0]
            break;
 800068a:	e004      	b.n	8000696 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000692:	603b      	str	r3, [r7, #0]
            break;
 8000694:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000696:	683b      	ldr	r3, [r7, #0]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	4618      	mov	r0, r3
 800069c:	f7ff ff70 	bl	8000580 <lcd_send_cmd>
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <lcd_init>:


void lcd_init (void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80006ac:	2032      	movs	r0, #50	; 0x32
 80006ae:	f000 fcef 	bl	8001090 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006b2:	2030      	movs	r0, #48	; 0x30
 80006b4:	f7ff ff64 	bl	8000580 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80006b8:	2005      	movs	r0, #5
 80006ba:	f000 fce9 	bl	8001090 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006be:	2030      	movs	r0, #48	; 0x30
 80006c0:	f7ff ff5e 	bl	8000580 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80006c4:	2001      	movs	r0, #1
 80006c6:	f000 fce3 	bl	8001090 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006ca:	2030      	movs	r0, #48	; 0x30
 80006cc:	f7ff ff58 	bl	8000580 <lcd_send_cmd>
	HAL_Delay(10);
 80006d0:	200a      	movs	r0, #10
 80006d2:	f000 fcdd 	bl	8001090 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80006d6:	2020      	movs	r0, #32
 80006d8:	f7ff ff52 	bl	8000580 <lcd_send_cmd>
	HAL_Delay(10);
 80006dc:	200a      	movs	r0, #10
 80006de:	f000 fcd7 	bl	8001090 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006e2:	2028      	movs	r0, #40	; 0x28
 80006e4:	f7ff ff4c 	bl	8000580 <lcd_send_cmd>
	HAL_Delay(1);
 80006e8:	2001      	movs	r0, #1
 80006ea:	f000 fcd1 	bl	8001090 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006ee:	2008      	movs	r0, #8
 80006f0:	f7ff ff46 	bl	8000580 <lcd_send_cmd>
	HAL_Delay(1);
 80006f4:	2001      	movs	r0, #1
 80006f6:	f000 fccb 	bl	8001090 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006fa:	2001      	movs	r0, #1
 80006fc:	f7ff ff40 	bl	8000580 <lcd_send_cmd>
	HAL_Delay(1);
 8000700:	2001      	movs	r0, #1
 8000702:	f000 fcc5 	bl	8001090 <HAL_Delay>
	HAL_Delay(1);
 8000706:	2001      	movs	r0, #1
 8000708:	f000 fcc2 	bl	8001090 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800070c:	2006      	movs	r0, #6
 800070e:	f7ff ff37 	bl	8000580 <lcd_send_cmd>
	HAL_Delay(1);
 8000712:	2001      	movs	r0, #1
 8000714:	f000 fcbc 	bl	8001090 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000718:	200c      	movs	r0, #12
 800071a:	f7ff ff31 	bl	8000580 <lcd_send_cmd>
}
 800071e:	bf00      	nop
 8000720:	bd80      	pop	{r7, pc}

08000722 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b082      	sub	sp, #8
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800072a:	e006      	b.n	800073a <lcd_send_string+0x18>
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	1c5a      	adds	r2, r3, #1
 8000730:	607a      	str	r2, [r7, #4]
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	f7ff ff53 	bl	80005e0 <lcd_send_data>
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d1f4      	bne.n	800072c <lcd_send_string+0xa>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
	...

0800074c <HAL_TIM_IC_CaptureCallback>:
uint32_t Difference = 0;
uint8_t Is_First_Captured = 0;
int duty=0;

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel2
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	7f1b      	ldrb	r3, [r3, #28]
 8000758:	2b02      	cmp	r3, #2
 800075a:	d157      	bne.n	800080c <HAL_TIM_IC_CaptureCallback+0xc0>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 800075c:	4b2d      	ldr	r3, [pc, #180]	; (8000814 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d11a      	bne.n	800079a <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2); // read the first value
 8000764:	2104      	movs	r1, #4
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f002 fb0c 	bl	8002d84 <HAL_TIM_ReadCapturedValue>
 800076c:	4602      	mov	r2, r0
 800076e:	4b2a      	ldr	r3, [pc, #168]	; (8000818 <HAL_TIM_IC_CaptureCallback+0xcc>)
 8000770:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000772:	4b28      	ldr	r3, [pc, #160]	; (8000814 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8000774:	2201      	movs	r2, #1
 8000776:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	6a1a      	ldr	r2, [r3, #32]
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000786:	621a      	str	r2, [r3, #32]
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	6a1a      	ldr	r2, [r3, #32]
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f042 0220 	orr.w	r2, r2, #32
 8000796:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);

		}
	}
}
 8000798:	e038      	b.n	800080c <HAL_TIM_IC_CaptureCallback+0xc0>
		else if (Is_First_Captured==1)   // if the first is already captured
 800079a:	4b1e      	ldr	r3, [pc, #120]	; (8000814 <HAL_TIM_IC_CaptureCallback+0xc8>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d134      	bne.n	800080c <HAL_TIM_IC_CaptureCallback+0xc0>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);  // read second value
 80007a2:	2104      	movs	r1, #4
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f002 faed 	bl	8002d84 <HAL_TIM_ReadCapturedValue>
 80007aa:	4602      	mov	r2, r0
 80007ac:	4b1b      	ldr	r3, [pc, #108]	; (800081c <HAL_TIM_IC_CaptureCallback+0xd0>)
 80007ae:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2200      	movs	r2, #0
 80007b6:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <HAL_TIM_IC_CaptureCallback+0xd0>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d912      	bls.n	80007ea <HAL_TIM_IC_CaptureCallback+0x9e>
				Difference = IC_Val2-IC_Val1;
 80007c4:	4b15      	ldr	r3, [pc, #84]	; (800081c <HAL_TIM_IC_CaptureCallback+0xd0>)
 80007c6:	681a      	ldr	r2, [r3, #0]
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <HAL_TIM_IC_CaptureCallback+0xcc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	1ad3      	subs	r3, r2, r3
 80007ce:	4a14      	ldr	r2, [pc, #80]	; (8000820 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80007d0:	6013      	str	r3, [r2, #0]
				duty = (int) 100*Difference/IC_Val2;
 80007d2:	4b13      	ldr	r3, [pc, #76]	; (8000820 <HAL_TIM_IC_CaptureCallback+0xd4>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	2264      	movs	r2, #100	; 0x64
 80007d8:	fb02 f203 	mul.w	r2, r2, r3
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <HAL_TIM_IC_CaptureCallback+0xd0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <HAL_TIM_IC_CaptureCallback+0xd8>)
 80007e8:	601a      	str	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 80007ea:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <HAL_TIM_IC_CaptureCallback+0xc8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	6a1a      	ldr	r2, [r3, #32]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80007fe:	621a      	str	r2, [r3, #32]
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681a      	ldr	r2, [r3, #0]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	6a12      	ldr	r2, [r2, #32]
 800080a:	621a      	str	r2, [r3, #32]
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000098 	.word	0x20000098
 8000818:	2000008c 	.word	0x2000008c
 800081c:	20000090 	.word	0x20000090
 8000820:	20000094 	.word	0x20000094
 8000824:	2000009c 	.word	0x2000009c

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082e:	f000 fbbd 	bl	8000fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000832:	f000 f871 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 f9b3 	bl	8000ba0 <MX_GPIO_Init>
  MX_I2C1_Init();
 800083a:	f000 f8d7 	bl	80009ec <MX_I2C1_Init>
  MX_TIM2_Init();
 800083e:	f000 f903 	bl	8000a48 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000842:	f000 f953 	bl	8000aec <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000846:	f7ff ff2f 	bl	80006a8 <lcd_init>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800084a:	2108      	movs	r1, #8
 800084c:	482a      	ldr	r0, [pc, #168]	; (80008f8 <main+0xd0>)
 800084e:	f001 ff69 	bl	8002724 <HAL_TIM_PWM_Start>

  TIM3->CCR3 = 0;
 8000852:	4b2a      	ldr	r3, [pc, #168]	; (80008fc <main+0xd4>)
 8000854:	2200      	movs	r2, #0
 8000856:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_2);
 8000858:	2104      	movs	r1, #4
 800085a:	4829      	ldr	r0, [pc, #164]	; (8000900 <main+0xd8>)
 800085c:	f001 ffc0 	bl	80027e0 <HAL_TIM_IC_Start_IT>

  /* USER CODE END 2 */
  lcd_clear();
 8000860:	f7ff feee 	bl	8000640 <lcd_clear>
  lcd_put_cur(0,0);
 8000864:	2100      	movs	r1, #0
 8000866:	2000      	movs	r0, #0
 8000868:	f7ff ff00 	bl	800066c <lcd_put_cur>

  lcd_send_string("INICIO DO TESTE!");
 800086c:	4825      	ldr	r0, [pc, #148]	; (8000904 <main+0xdc>)
 800086e:	f7ff ff58 	bl	8000722 <lcd_send_string>

  HAL_Delay(1000);
 8000872:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000876:	f000 fc0b 	bl	8001090 <HAL_Delay>

  lcd_clear();
 800087a:	f7ff fee1 	bl	8000640 <lcd_clear>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(1);
 800087e:	2001      	movs	r0, #1
 8000880:	f000 fc06 	bl	8001090 <HAL_Delay>
	  lcd_put_cur(0, 0);
 8000884:	2100      	movs	r1, #0
 8000886:	2000      	movs	r0, #0
 8000888:	f7ff fef0 	bl	800066c <lcd_put_cur>
	  lcd_send_string("PWM:");
 800088c:	481e      	ldr	r0, [pc, #120]	; (8000908 <main+0xe0>)
 800088e:	f7ff ff48 	bl	8000722 <lcd_send_string>
	  sprintf(buffer, "%d", (int)TIM3->CCR3);
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <main+0xd4>)
 8000894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000896:	461a      	mov	r2, r3
 8000898:	1d3b      	adds	r3, r7, #4
 800089a:	491c      	ldr	r1, [pc, #112]	; (800090c <main+0xe4>)
 800089c:	4618      	mov	r0, r3
 800089e:	f002 fee1 	bl	8003664 <siprintf>
	  lcd_send_string(buffer);
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	4618      	mov	r0, r3
 80008a6:	f7ff ff3c 	bl	8000722 <lcd_send_string>

	  lcd_put_cur(1, 0);
 80008aa:	2100      	movs	r1, #0
 80008ac:	2001      	movs	r0, #1
 80008ae:	f7ff fedd 	bl	800066c <lcd_put_cur>

	  lcd_send_string("medido:");
 80008b2:	4817      	ldr	r0, [pc, #92]	; (8000910 <main+0xe8>)
 80008b4:	f7ff ff35 	bl	8000722 <lcd_send_string>
	  sprintf(buffer, "%d", (int) duty);
 80008b8:	4b16      	ldr	r3, [pc, #88]	; (8000914 <main+0xec>)
 80008ba:	681a      	ldr	r2, [r3, #0]
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4913      	ldr	r1, [pc, #76]	; (800090c <main+0xe4>)
 80008c0:	4618      	mov	r0, r3
 80008c2:	f002 fecf 	bl	8003664 <siprintf>
	  lcd_send_string(buffer);
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ff2a 	bl	8000722 <lcd_send_string>

	  HAL_Delay(500);
 80008ce:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80008d2:	f000 fbdd 	bl	8001090 <HAL_Delay>

	  if(TIM3->CCR3 == 900) TIM3->CCR3 = 0;
 80008d6:	4b09      	ldr	r3, [pc, #36]	; (80008fc <main+0xd4>)
 80008d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008da:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 80008de:	d103      	bne.n	80008e8 <main+0xc0>
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <main+0xd4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80008e6:	e004      	b.n	80008f2 <main+0xca>
	  else TIM3->CCR3 += 100;
 80008e8:	4b04      	ldr	r3, [pc, #16]	; (80008fc <main+0xd4>)
 80008ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008ec:	4a03      	ldr	r2, [pc, #12]	; (80008fc <main+0xd4>)
 80008ee:	3364      	adds	r3, #100	; 0x64
 80008f0:	63d3      	str	r3, [r2, #60]	; 0x3c

	  lcd_clear();
 80008f2:	f7ff fea5 	bl	8000640 <lcd_clear>
	  HAL_Delay(1);
 80008f6:	e7c2      	b.n	800087e <main+0x56>
 80008f8:	20000100 	.word	0x20000100
 80008fc:	40000400 	.word	0x40000400
 8000900:	20000140 	.word	0x20000140
 8000904:	08003e88 	.word	0x08003e88
 8000908:	08003e9c 	.word	0x08003e9c
 800090c:	08003ea4 	.word	0x08003ea4
 8000910:	08003ea8 	.word	0x08003ea8
 8000914:	2000009c 	.word	0x2000009c

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b094      	sub	sp, #80	; 0x50
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 0320 	add.w	r3, r7, #32
 8000922:	2230      	movs	r2, #48	; 0x30
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f002 fe94 	bl	8003654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	f107 030c 	add.w	r3, r7, #12
 8000930:	2200      	movs	r2, #0
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	605a      	str	r2, [r3, #4]
 8000936:	609a      	str	r2, [r3, #8]
 8000938:	60da      	str	r2, [r3, #12]
 800093a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800093c:	2300      	movs	r3, #0
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <SystemClock_Config+0xcc>)
 8000942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000944:	4a27      	ldr	r2, [pc, #156]	; (80009e4 <SystemClock_Config+0xcc>)
 8000946:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094a:	6413      	str	r3, [r2, #64]	; 0x40
 800094c:	4b25      	ldr	r3, [pc, #148]	; (80009e4 <SystemClock_Config+0xcc>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000950:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	4b22      	ldr	r3, [pc, #136]	; (80009e8 <SystemClock_Config+0xd0>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000964:	4a20      	ldr	r2, [pc, #128]	; (80009e8 <SystemClock_Config+0xd0>)
 8000966:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <SystemClock_Config+0xd0>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800097c:	2301      	movs	r3, #1
 800097e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000980:	2310      	movs	r3, #16
 8000982:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000984:	2302      	movs	r3, #2
 8000986:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000988:	2300      	movs	r3, #0
 800098a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800098c:	2308      	movs	r3, #8
 800098e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000990:	2354      	movs	r3, #84	; 0x54
 8000992:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000994:	2302      	movs	r3, #2
 8000996:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000998:	2304      	movs	r3, #4
 800099a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800099c:	f107 0320 	add.w	r3, r7, #32
 80009a0:	4618      	mov	r0, r3
 80009a2:	f001 fa6b 	bl	8001e7c <HAL_RCC_OscConfig>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009ac:	f000 f92e 	bl	8000c0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b0:	230f      	movs	r3, #15
 80009b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009b4:	2302      	movs	r3, #2
 80009b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80009bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009c2:	2300      	movs	r3, #0
 80009c4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009c6:	f107 030c 	add.w	r3, r7, #12
 80009ca:	2102      	movs	r1, #2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f001 fcc5 	bl	800235c <HAL_RCC_ClockConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009d8:	f000 f918 	bl	8000c0c <Error_Handler>
  }
}
 80009dc:	bf00      	nop
 80009de:	3750      	adds	r7, #80	; 0x50
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40007000 	.word	0x40007000

080009ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f0:	4b12      	ldr	r3, [pc, #72]	; (8000a3c <MX_I2C1_Init+0x50>)
 80009f2:	4a13      	ldr	r2, [pc, #76]	; (8000a40 <MX_I2C1_Init+0x54>)
 80009f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <MX_I2C1_Init+0x50>)
 80009f8:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <MX_I2C1_Init+0x58>)
 80009fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009fc:	4b0f      	ldr	r3, [pc, #60]	; (8000a3c <MX_I2C1_Init+0x50>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <MX_I2C1_Init+0x50>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <MX_I2C1_Init+0x50>)
 8000a0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <MX_I2C1_Init+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <MX_I2C1_Init+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1c:	4b07      	ldr	r3, [pc, #28]	; (8000a3c <MX_I2C1_Init+0x50>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <MX_I2C1_Init+0x50>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a28:	4804      	ldr	r0, [pc, #16]	; (8000a3c <MX_I2C1_Init+0x50>)
 8000a2a:	f000 fde7 	bl	80015fc <HAL_I2C_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a34:	f000 f8ea 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200000ac 	.word	0x200000ac
 8000a40:	40005400 	.word	0x40005400
 8000a44:	000186a0 	.word	0x000186a0

08000a48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	2200      	movs	r2, #0
 8000a54:	601a      	str	r2, [r3, #0]
 8000a56:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a58:	463b      	mov	r3, r7
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a64:	4b20      	ldr	r3, [pc, #128]	; (8000ae8 <MX_TIM2_Init+0xa0>)
 8000a66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <MX_TIM2_Init+0xa0>)
 8000a6e:	2253      	movs	r2, #83	; 0x53
 8000a70:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a72:	4b1d      	ldr	r3, [pc, #116]	; (8000ae8 <MX_TIM2_Init+0xa0>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8000a78:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_TIM2_Init+0xa0>)
 8000a7a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000a7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a80:	4b19      	ldr	r3, [pc, #100]	; (8000ae8 <MX_TIM2_Init+0xa0>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_TIM2_Init+0xa0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000a8c:	4816      	ldr	r0, [pc, #88]	; (8000ae8 <MX_TIM2_Init+0xa0>)
 8000a8e:	f001 fe7b 	bl	8002788 <HAL_TIM_IC_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000a98:	f000 f8b8 	bl	8000c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <MX_TIM2_Init+0xa0>)
 8000aac:	f002 fd26 	bl	80034fc <HAL_TIMEx_MasterConfigSynchronization>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ab6:	f000 f8a9 	bl	8000c0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000aba:	2300      	movs	r3, #0
 8000abc:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000aca:	463b      	mov	r3, r7
 8000acc:	2204      	movs	r2, #4
 8000ace:	4619      	mov	r1, r3
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_TIM2_Init+0xa0>)
 8000ad2:	f001 fff5 	bl	8002ac0 <HAL_TIM_IC_ConfigChannel>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000adc:	f000 f896 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ae0:	bf00      	nop
 8000ae2:	3718      	adds	r7, #24
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000140 	.word	0x20000140

08000aec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af2:	f107 0320 	add.w	r3, r7, #32
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000afc:	1d3b      	adds	r3, r7, #4
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]
 8000b02:	605a      	str	r2, [r3, #4]
 8000b04:	609a      	str	r2, [r3, #8]
 8000b06:	60da      	str	r2, [r3, #12]
 8000b08:	611a      	str	r2, [r3, #16]
 8000b0a:	615a      	str	r2, [r3, #20]
 8000b0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b0e:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <MX_TIM3_Init+0xac>)
 8000b10:	4a22      	ldr	r2, [pc, #136]	; (8000b9c <MX_TIM3_Init+0xb0>)
 8000b12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8000b14:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <MX_TIM3_Init+0xac>)
 8000b16:	2253      	movs	r2, #83	; 0x53
 8000b18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1a:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <MX_TIM3_Init+0xac>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000b20:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <MX_TIM3_Init+0xac>)
 8000b22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b28:	4b1b      	ldr	r3, [pc, #108]	; (8000b98 <MX_TIM3_Init+0xac>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <MX_TIM3_Init+0xac>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000b34:	4818      	ldr	r0, [pc, #96]	; (8000b98 <MX_TIM3_Init+0xac>)
 8000b36:	f001 fdc9 	bl	80026cc <HAL_TIM_PWM_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000b40:	f000 f864 	bl	8000c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b44:	2300      	movs	r3, #0
 8000b46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b4c:	f107 0320 	add.w	r3, r7, #32
 8000b50:	4619      	mov	r1, r3
 8000b52:	4811      	ldr	r0, [pc, #68]	; (8000b98 <MX_TIM3_Init+0xac>)
 8000b54:	f002 fcd2 	bl	80034fc <HAL_TIMEx_MasterConfigSynchronization>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000b5e:	f000 f855 	bl	8000c0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b62:	2360      	movs	r3, #96	; 0x60
 8000b64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2208      	movs	r2, #8
 8000b76:	4619      	mov	r1, r3
 8000b78:	4807      	ldr	r0, [pc, #28]	; (8000b98 <MX_TIM3_Init+0xac>)
 8000b7a:	f002 f83d 	bl	8002bf8 <HAL_TIM_PWM_ConfigChannel>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000b84:	f000 f842 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000b88:	4803      	ldr	r0, [pc, #12]	; (8000b98 <MX_TIM3_Init+0xac>)
 8000b8a:	f000 f927 	bl	8000ddc <HAL_TIM_MspPostInit>

}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000100 	.word	0x20000100
 8000b9c:	40000400 	.word	0x40000400

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b085      	sub	sp, #20
 8000ba4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <MX_GPIO_Init+0x68>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a16      	ldr	r2, [pc, #88]	; (8000c08 <MX_GPIO_Init+0x68>)
 8000bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_GPIO_Init+0x68>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <MX_GPIO_Init+0x68>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a0f      	ldr	r2, [pc, #60]	; (8000c08 <MX_GPIO_Init+0x68>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <MX_GPIO_Init+0x68>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	607b      	str	r3, [r7, #4]
 8000be2:	4b09      	ldr	r3, [pc, #36]	; (8000c08 <MX_GPIO_Init+0x68>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <MX_GPIO_Init+0x68>)
 8000be8:	f043 0302 	orr.w	r3, r3, #2
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <MX_GPIO_Init+0x68>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]

}
 8000bfa:	bf00      	nop
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40023800 	.word	0x40023800

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	607b      	str	r3, [r7, #4]
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a0f      	ldr	r2, [pc, #60]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
 8000c32:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	603b      	str	r3, [r7, #0]
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	4a08      	ldr	r2, [pc, #32]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4e:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_MspInit+0x4c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c56:	603b      	str	r3, [r7, #0]
 8000c58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40023800 	.word	0x40023800

08000c6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	605a      	str	r2, [r3, #4]
 8000c7e:	609a      	str	r2, [r3, #8]
 8000c80:	60da      	str	r2, [r3, #12]
 8000c82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a19      	ldr	r2, [pc, #100]	; (8000cf0 <HAL_I2C_MspInit+0x84>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d12c      	bne.n	8000ce8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	613b      	str	r3, [r7, #16]
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <HAL_I2C_MspInit+0x88>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a17      	ldr	r2, [pc, #92]	; (8000cf4 <HAL_I2C_MspInit+0x88>)
 8000c98:	f043 0302 	orr.w	r3, r3, #2
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <HAL_I2C_MspInit+0x88>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0302 	and.w	r3, r3, #2
 8000ca6:	613b      	str	r3, [r7, #16]
 8000ca8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000caa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb0:	2312      	movs	r3, #18
 8000cb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb8:	2303      	movs	r3, #3
 8000cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000cbc:	2304      	movs	r3, #4
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc0:	f107 0314 	add.w	r3, r7, #20
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	480c      	ldr	r0, [pc, #48]	; (8000cf8 <HAL_I2C_MspInit+0x8c>)
 8000cc8:	f000 fb16 	bl	80012f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_I2C_MspInit+0x88>)
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <HAL_I2C_MspInit+0x88>)
 8000cd6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cda:	6413      	str	r3, [r2, #64]	; 0x40
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <HAL_I2C_MspInit+0x88>)
 8000cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000ce8:	bf00      	nop
 8000cea:	3728      	adds	r7, #40	; 0x28
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	40005400 	.word	0x40005400
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	40020400 	.word	0x40020400

08000cfc <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
 8000d0e:	609a      	str	r2, [r3, #8]
 8000d10:	60da      	str	r2, [r3, #12]
 8000d12:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d1c:	d133      	bne.n	8000d86 <HAL_TIM_IC_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	613b      	str	r3, [r7, #16]
 8000d22:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <HAL_TIM_IC_MspInit+0x94>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	4a1a      	ldr	r2, [pc, #104]	; (8000d90 <HAL_TIM_IC_MspInit+0x94>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_TIM_IC_MspInit+0x94>)
 8000d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	613b      	str	r3, [r7, #16]
 8000d38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
 8000d3e:	4b14      	ldr	r3, [pc, #80]	; (8000d90 <HAL_TIM_IC_MspInit+0x94>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a13      	ldr	r2, [pc, #76]	; (8000d90 <HAL_TIM_IC_MspInit+0x94>)
 8000d44:	f043 0301 	orr.w	r3, r3, #1
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b11      	ldr	r3, [pc, #68]	; (8000d90 <HAL_TIM_IC_MspInit+0x94>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60fb      	str	r3, [r7, #12]
 8000d54:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000d56:	2302      	movs	r3, #2
 8000d58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d66:	2301      	movs	r3, #1
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4808      	ldr	r0, [pc, #32]	; (8000d94 <HAL_TIM_IC_MspInit+0x98>)
 8000d72:	f000 fac1 	bl	80012f8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2100      	movs	r1, #0
 8000d7a:	201c      	movs	r0, #28
 8000d7c:	f000 fa85 	bl	800128a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000d80:	201c      	movs	r0, #28
 8000d82:	f000 fa9e 	bl	80012c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000d86:	bf00      	nop
 8000d88:	3728      	adds	r7, #40	; 0x28
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020000 	.word	0x40020000

08000d98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b085      	sub	sp, #20
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <HAL_TIM_PWM_MspInit+0x3c>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d10d      	bne.n	8000dc6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	4b0a      	ldr	r3, [pc, #40]	; (8000dd8 <HAL_TIM_PWM_MspInit+0x40>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <HAL_TIM_PWM_MspInit+0x40>)
 8000db4:	f043 0302 	orr.w	r3, r3, #2
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <HAL_TIM_PWM_MspInit+0x40>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	60fb      	str	r3, [r7, #12]
 8000dc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3714      	adds	r7, #20
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40000400 	.word	0x40000400
 8000dd8:	40023800 	.word	0x40023800

08000ddc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 030c 	add.w	r3, r7, #12
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <HAL_TIM_MspPostInit+0x68>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d11d      	bne.n	8000e3a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <HAL_TIM_MspPostInit+0x6c>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	4a10      	ldr	r2, [pc, #64]	; (8000e48 <HAL_TIM_MspPostInit+0x6c>)
 8000e08:	f043 0302 	orr.w	r3, r3, #2
 8000e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <HAL_TIM_MspPostInit+0x6c>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	60bb      	str	r3, [r7, #8]
 8000e18:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e2e:	f107 030c 	add.w	r3, r7, #12
 8000e32:	4619      	mov	r1, r3
 8000e34:	4805      	ldr	r0, [pc, #20]	; (8000e4c <HAL_TIM_MspPostInit+0x70>)
 8000e36:	f000 fa5f 	bl	80012f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3720      	adds	r7, #32
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40000400 	.word	0x40000400
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020400 	.word	0x40020400

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <HardFault_Handler+0x4>

08000e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <MemManage_Handler+0x4>

08000e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea4:	f000 f8d4 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <TIM2_IRQHandler+0x10>)
 8000eb2:	f001 fcfd 	bl	80028b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	20000140 	.word	0x20000140

08000ec0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ec8:	4a14      	ldr	r2, [pc, #80]	; (8000f1c <_sbrk+0x5c>)
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <_sbrk+0x60>)
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ed4:	4b13      	ldr	r3, [pc, #76]	; (8000f24 <_sbrk+0x64>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <_sbrk+0x64>)
 8000ede:	4a12      	ldr	r2, [pc, #72]	; (8000f28 <_sbrk+0x68>)
 8000ee0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ee2:	4b10      	ldr	r3, [pc, #64]	; (8000f24 <_sbrk+0x64>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4413      	add	r3, r2
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d207      	bcs.n	8000f00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef0:	f002 fb86 	bl	8003600 <__errno>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	230c      	movs	r3, #12
 8000ef8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	e009      	b.n	8000f14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f00:	4b08      	ldr	r3, [pc, #32]	; (8000f24 <_sbrk+0x64>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f06:	4b07      	ldr	r3, [pc, #28]	; (8000f24 <_sbrk+0x64>)
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4a05      	ldr	r2, [pc, #20]	; (8000f24 <_sbrk+0x64>)
 8000f10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f12:	68fb      	ldr	r3, [r7, #12]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3718      	adds	r7, #24
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20018000 	.word	0x20018000
 8000f20:	00000400 	.word	0x00000400
 8000f24:	200000a0 	.word	0x200000a0
 8000f28:	20000188 	.word	0x20000188

08000f2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <SystemInit+0x28>)
 8000f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f36:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <SystemInit+0x28>)
 8000f38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f40:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <SystemInit+0x28>)
 8000f42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f46:	609a      	str	r2, [r3, #8]
#endif
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f5c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f5e:	e003      	b.n	8000f68 <LoopCopyDataInit>

08000f60 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f60:	4b0c      	ldr	r3, [pc, #48]	; (8000f94 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f62:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f64:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f66:	3104      	adds	r1, #4

08000f68 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f6c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f6e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f70:	d3f6      	bcc.n	8000f60 <CopyDataInit>
  ldr  r2, =_sbss
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f74:	e002      	b.n	8000f7c <LoopFillZerobss>

08000f76 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f76:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f78:	f842 3b04 	str.w	r3, [r2], #4

08000f7c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f7e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f80:	d3f9      	bcc.n	8000f76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f82:	f7ff ffd3 	bl	8000f2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f002 fb41 	bl	800360c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8a:	f7ff fc4d 	bl	8000828 <main>
  bx  lr    
 8000f8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f90:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000f94:	08003f0c 	.word	0x08003f0c
  ldr  r0, =_sdata
 8000f98:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f9c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000fa0:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000fa4:	20000188 	.word	0x20000188

08000fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC_IRQHandler>
	...

08000fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <HAL_Init+0x40>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_Init+0x40>)
 8000fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_Init+0x40>)
 8000fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 f94d 	bl	8001274 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f000 f808 	bl	8000ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff fe1c 	bl	8000c1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023c00 	.word	0x40023c00

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x54>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_InitTick+0x58>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	fbb3 f3f1 	udiv	r3, r3, r1
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f965 	bl	80012de <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e00e      	b.n	800103c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	d80a      	bhi.n	800103a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001024:	2200      	movs	r2, #0
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f000 f92d 	bl	800128a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <HAL_InitTick+0x5c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e000      	b.n	800103c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000000 	.word	0x20000000
 8001048:	20000008 	.word	0x20000008
 800104c:	20000004 	.word	0x20000004

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008
 8001074:	20000180 	.word	0x20000180

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000180 	.word	0x20000180

08001090 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001098:	f7ff ffee 	bl	8001078 <HAL_GetTick>
 800109c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a8:	d005      	beq.n	80010b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <HAL_Delay+0x40>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010b6:	bf00      	nop
 80010b8:	f7ff ffde 	bl	8001078 <HAL_GetTick>
 80010bc:	4602      	mov	r2, r0
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	68fa      	ldr	r2, [r7, #12]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d8f7      	bhi.n	80010b8 <HAL_Delay+0x28>
  {
  }
}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20000008 	.word	0x20000008

080010d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010ea:	68ba      	ldr	r2, [r7, #8]
 80010ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010f0:	4013      	ands	r3, r2
 80010f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001104:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001106:	4a04      	ldr	r2, [pc, #16]	; (8001118 <__NVIC_SetPriorityGrouping+0x44>)
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	60d3      	str	r3, [r2, #12]
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000ed00 	.word	0xe000ed00

0800111c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001120:	4b04      	ldr	r3, [pc, #16]	; (8001134 <__NVIC_GetPriorityGrouping+0x18>)
 8001122:	68db      	ldr	r3, [r3, #12]
 8001124:	0a1b      	lsrs	r3, r3, #8
 8001126:	f003 0307 	and.w	r3, r3, #7
}
 800112a:	4618      	mov	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	e000ed00 	.word	0xe000ed00

08001138 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	2b00      	cmp	r3, #0
 8001148:	db0b      	blt.n	8001162 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	f003 021f 	and.w	r2, r3, #31
 8001150:	4907      	ldr	r1, [pc, #28]	; (8001170 <__NVIC_EnableIRQ+0x38>)
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	095b      	lsrs	r3, r3, #5
 8001158:	2001      	movs	r0, #1
 800115a:	fa00 f202 	lsl.w	r2, r0, r2
 800115e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000e100 	.word	0xe000e100

08001174 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	6039      	str	r1, [r7, #0]
 800117e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001180:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001184:	2b00      	cmp	r3, #0
 8001186:	db0a      	blt.n	800119e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	490c      	ldr	r1, [pc, #48]	; (80011c0 <__NVIC_SetPriority+0x4c>)
 800118e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001192:	0112      	lsls	r2, r2, #4
 8001194:	b2d2      	uxtb	r2, r2
 8001196:	440b      	add	r3, r1
 8001198:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800119c:	e00a      	b.n	80011b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4908      	ldr	r1, [pc, #32]	; (80011c4 <__NVIC_SetPriority+0x50>)
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 030f 	and.w	r3, r3, #15
 80011aa:	3b04      	subs	r3, #4
 80011ac:	0112      	lsls	r2, r2, #4
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	440b      	add	r3, r1
 80011b2:	761a      	strb	r2, [r3, #24]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b089      	sub	sp, #36	; 0x24
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	f003 0307 	and.w	r3, r3, #7
 80011da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f1c3 0307 	rsb	r3, r3, #7
 80011e2:	2b04      	cmp	r3, #4
 80011e4:	bf28      	it	cs
 80011e6:	2304      	movcs	r3, #4
 80011e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3304      	adds	r3, #4
 80011ee:	2b06      	cmp	r3, #6
 80011f0:	d902      	bls.n	80011f8 <NVIC_EncodePriority+0x30>
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	3b03      	subs	r3, #3
 80011f6:	e000      	b.n	80011fa <NVIC_EncodePriority+0x32>
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43da      	mvns	r2, r3
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	401a      	ands	r2, r3
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	fa01 f303 	lsl.w	r3, r1, r3
 800121a:	43d9      	mvns	r1, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001220:	4313      	orrs	r3, r2
         );
}
 8001222:	4618      	mov	r0, r3
 8001224:	3724      	adds	r7, #36	; 0x24
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
	...

08001230 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3b01      	subs	r3, #1
 800123c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001240:	d301      	bcc.n	8001246 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001242:	2301      	movs	r3, #1
 8001244:	e00f      	b.n	8001266 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001246:	4a0a      	ldr	r2, [pc, #40]	; (8001270 <SysTick_Config+0x40>)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800124e:	210f      	movs	r1, #15
 8001250:	f04f 30ff 	mov.w	r0, #4294967295
 8001254:	f7ff ff8e 	bl	8001174 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <SysTick_Config+0x40>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800125e:	4b04      	ldr	r3, [pc, #16]	; (8001270 <SysTick_Config+0x40>)
 8001260:	2207      	movs	r2, #7
 8001262:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	e000e010 	.word	0xe000e010

08001274 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ff29 	bl	80010d4 <__NVIC_SetPriorityGrouping>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800128a:	b580      	push	{r7, lr}
 800128c:	b086      	sub	sp, #24
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	60b9      	str	r1, [r7, #8]
 8001294:	607a      	str	r2, [r7, #4]
 8001296:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800129c:	f7ff ff3e 	bl	800111c <__NVIC_GetPriorityGrouping>
 80012a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68b9      	ldr	r1, [r7, #8]
 80012a6:	6978      	ldr	r0, [r7, #20]
 80012a8:	f7ff ff8e 	bl	80011c8 <NVIC_EncodePriority>
 80012ac:	4602      	mov	r2, r0
 80012ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b2:	4611      	mov	r1, r2
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff ff5d 	bl	8001174 <__NVIC_SetPriority>
}
 80012ba:	bf00      	nop
 80012bc:	3718      	adds	r7, #24
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	4603      	mov	r3, r0
 80012ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff ff31 	bl	8001138 <__NVIC_EnableIRQ>
}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}

080012de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ffa2 	bl	8001230 <SysTick_Config>
 80012ec:	4603      	mov	r3, r0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
	...

080012f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b089      	sub	sp, #36	; 0x24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800130a:	2300      	movs	r3, #0
 800130c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800130e:	2300      	movs	r3, #0
 8001310:	61fb      	str	r3, [r7, #28]
 8001312:	e159      	b.n	80015c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001314:	2201      	movs	r2, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	4013      	ands	r3, r2
 8001326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	429a      	cmp	r2, r3
 800132e:	f040 8148 	bne.w	80015c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d00b      	beq.n	8001352 <HAL_GPIO_Init+0x5a>
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d007      	beq.n	8001352 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001346:	2b11      	cmp	r3, #17
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	2b12      	cmp	r3, #18
 8001350:	d130      	bne.n	80013b4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	2203      	movs	r2, #3
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4013      	ands	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	68da      	ldr	r2, [r3, #12]
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	69ba      	ldr	r2, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	69ba      	ldr	r2, [r7, #24]
 8001380:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001388:	2201      	movs	r2, #1
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	091b      	lsrs	r3, r3, #4
 800139e:	f003 0201 	and.w	r2, r3, #1
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4313      	orrs	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	69ba      	ldr	r2, [r7, #24]
 80013b2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	2203      	movs	r2, #3
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	43db      	mvns	r3, r3
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	4013      	ands	r3, r2
 80013ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	69ba      	ldr	r2, [r7, #24]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0xfc>
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	2b12      	cmp	r3, #18
 80013f2:	d123      	bne.n	800143c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	08da      	lsrs	r2, r3, #3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3208      	adds	r2, #8
 80013fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	220f      	movs	r2, #15
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4013      	ands	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	691a      	ldr	r2, [r3, #16]
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f003 0307 	and.w	r3, r3, #7
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	69ba      	ldr	r2, [r7, #24]
 800142a:	4313      	orrs	r3, r2
 800142c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	08da      	lsrs	r2, r3, #3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	3208      	adds	r2, #8
 8001436:	69b9      	ldr	r1, [r7, #24]
 8001438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	2203      	movs	r2, #3
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0203 	and.w	r2, r3, #3
 800145c:	69fb      	ldr	r3, [r7, #28]
 800145e:	005b      	lsls	r3, r3, #1
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	69ba      	ldr	r2, [r7, #24]
 8001466:	4313      	orrs	r3, r2
 8001468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	f000 80a2 	beq.w	80015c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b56      	ldr	r3, [pc, #344]	; (80015dc <HAL_GPIO_Init+0x2e4>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001486:	4a55      	ldr	r2, [pc, #340]	; (80015dc <HAL_GPIO_Init+0x2e4>)
 8001488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800148c:	6453      	str	r3, [r2, #68]	; 0x44
 800148e:	4b53      	ldr	r3, [pc, #332]	; (80015dc <HAL_GPIO_Init+0x2e4>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800149a:	4a51      	ldr	r2, [pc, #324]	; (80015e0 <HAL_GPIO_Init+0x2e8>)
 800149c:	69fb      	ldr	r3, [r7, #28]
 800149e:	089b      	lsrs	r3, r3, #2
 80014a0:	3302      	adds	r3, #2
 80014a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	f003 0303 	and.w	r3, r3, #3
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	220f      	movs	r2, #15
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a48      	ldr	r2, [pc, #288]	; (80015e4 <HAL_GPIO_Init+0x2ec>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d019      	beq.n	80014fa <HAL_GPIO_Init+0x202>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a47      	ldr	r2, [pc, #284]	; (80015e8 <HAL_GPIO_Init+0x2f0>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d013      	beq.n	80014f6 <HAL_GPIO_Init+0x1fe>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a46      	ldr	r2, [pc, #280]	; (80015ec <HAL_GPIO_Init+0x2f4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d00d      	beq.n	80014f2 <HAL_GPIO_Init+0x1fa>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a45      	ldr	r2, [pc, #276]	; (80015f0 <HAL_GPIO_Init+0x2f8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d007      	beq.n	80014ee <HAL_GPIO_Init+0x1f6>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4a44      	ldr	r2, [pc, #272]	; (80015f4 <HAL_GPIO_Init+0x2fc>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d101      	bne.n	80014ea <HAL_GPIO_Init+0x1f2>
 80014e6:	2304      	movs	r3, #4
 80014e8:	e008      	b.n	80014fc <HAL_GPIO_Init+0x204>
 80014ea:	2307      	movs	r3, #7
 80014ec:	e006      	b.n	80014fc <HAL_GPIO_Init+0x204>
 80014ee:	2303      	movs	r3, #3
 80014f0:	e004      	b.n	80014fc <HAL_GPIO_Init+0x204>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e002      	b.n	80014fc <HAL_GPIO_Init+0x204>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_GPIO_Init+0x204>
 80014fa:	2300      	movs	r3, #0
 80014fc:	69fa      	ldr	r2, [r7, #28]
 80014fe:	f002 0203 	and.w	r2, r2, #3
 8001502:	0092      	lsls	r2, r2, #2
 8001504:	4093      	lsls	r3, r2
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4313      	orrs	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800150c:	4934      	ldr	r1, [pc, #208]	; (80015e0 <HAL_GPIO_Init+0x2e8>)
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	089b      	lsrs	r3, r3, #2
 8001512:	3302      	adds	r3, #2
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800151a:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <HAL_GPIO_Init+0x300>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	43db      	mvns	r3, r3
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	4013      	ands	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d003      	beq.n	800153e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800153e:	4a2e      	ldr	r2, [pc, #184]	; (80015f8 <HAL_GPIO_Init+0x300>)
 8001540:	69bb      	ldr	r3, [r7, #24]
 8001542:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001544:	4b2c      	ldr	r3, [pc, #176]	; (80015f8 <HAL_GPIO_Init+0x300>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	43db      	mvns	r3, r3
 800154e:	69ba      	ldr	r2, [r7, #24]
 8001550:	4013      	ands	r3, r2
 8001552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001568:	4a23      	ldr	r2, [pc, #140]	; (80015f8 <HAL_GPIO_Init+0x300>)
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800156e:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <HAL_GPIO_Init+0x300>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	43db      	mvns	r3, r3
 8001578:	69ba      	ldr	r2, [r7, #24]
 800157a:	4013      	ands	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	4313      	orrs	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001592:	4a19      	ldr	r2, [pc, #100]	; (80015f8 <HAL_GPIO_Init+0x300>)
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001598:	4b17      	ldr	r3, [pc, #92]	; (80015f8 <HAL_GPIO_Init+0x300>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	4013      	ands	r3, r2
 80015a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015bc:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <HAL_GPIO_Init+0x300>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3301      	adds	r3, #1
 80015c6:	61fb      	str	r3, [r7, #28]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	2b0f      	cmp	r3, #15
 80015cc:	f67f aea2 	bls.w	8001314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015d0:	bf00      	nop
 80015d2:	3724      	adds	r7, #36	; 0x24
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	40023800 	.word	0x40023800
 80015e0:	40013800 	.word	0x40013800
 80015e4:	40020000 	.word	0x40020000
 80015e8:	40020400 	.word	0x40020400
 80015ec:	40020800 	.word	0x40020800
 80015f0:	40020c00 	.word	0x40020c00
 80015f4:	40021000 	.word	0x40021000
 80015f8:	40013c00 	.word	0x40013c00

080015fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e11f      	b.n	800184e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d106      	bne.n	8001628 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff fb22 	bl	8000c6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2224      	movs	r2, #36	; 0x24
 800162c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f022 0201 	bic.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800164e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800165e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001660:	f001 f820 	bl	80026a4 <HAL_RCC_GetPCLK1Freq>
 8001664:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	4a7b      	ldr	r2, [pc, #492]	; (8001858 <HAL_I2C_Init+0x25c>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d807      	bhi.n	8001680 <HAL_I2C_Init+0x84>
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	4a7a      	ldr	r2, [pc, #488]	; (800185c <HAL_I2C_Init+0x260>)
 8001674:	4293      	cmp	r3, r2
 8001676:	bf94      	ite	ls
 8001678:	2301      	movls	r3, #1
 800167a:	2300      	movhi	r3, #0
 800167c:	b2db      	uxtb	r3, r3
 800167e:	e006      	b.n	800168e <HAL_I2C_Init+0x92>
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4a77      	ldr	r2, [pc, #476]	; (8001860 <HAL_I2C_Init+0x264>)
 8001684:	4293      	cmp	r3, r2
 8001686:	bf94      	ite	ls
 8001688:	2301      	movls	r3, #1
 800168a:	2300      	movhi	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e0db      	b.n	800184e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4a72      	ldr	r2, [pc, #456]	; (8001864 <HAL_I2C_Init+0x268>)
 800169a:	fba2 2303 	umull	r2, r3, r2, r3
 800169e:	0c9b      	lsrs	r3, r3, #18
 80016a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	68ba      	ldr	r2, [r7, #8]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	4a64      	ldr	r2, [pc, #400]	; (8001858 <HAL_I2C_Init+0x25c>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d802      	bhi.n	80016d0 <HAL_I2C_Init+0xd4>
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	3301      	adds	r3, #1
 80016ce:	e009      	b.n	80016e4 <HAL_I2C_Init+0xe8>
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	4a63      	ldr	r2, [pc, #396]	; (8001868 <HAL_I2C_Init+0x26c>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	099b      	lsrs	r3, r3, #6
 80016e2:	3301      	adds	r3, #1
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	430b      	orrs	r3, r1
 80016ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80016f6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4956      	ldr	r1, [pc, #344]	; (8001858 <HAL_I2C_Init+0x25c>)
 8001700:	428b      	cmp	r3, r1
 8001702:	d80d      	bhi.n	8001720 <HAL_I2C_Init+0x124>
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1e59      	subs	r1, r3, #1
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	005b      	lsls	r3, r3, #1
 800170e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001712:	3301      	adds	r3, #1
 8001714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001718:	2b04      	cmp	r3, #4
 800171a:	bf38      	it	cc
 800171c:	2304      	movcc	r3, #4
 800171e:	e04f      	b.n	80017c0 <HAL_I2C_Init+0x1c4>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d111      	bne.n	800174c <HAL_I2C_Init+0x150>
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	1e58      	subs	r0, r3, #1
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6859      	ldr	r1, [r3, #4]
 8001730:	460b      	mov	r3, r1
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	440b      	add	r3, r1
 8001736:	fbb0 f3f3 	udiv	r3, r0, r3
 800173a:	3301      	adds	r3, #1
 800173c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001740:	2b00      	cmp	r3, #0
 8001742:	bf0c      	ite	eq
 8001744:	2301      	moveq	r3, #1
 8001746:	2300      	movne	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	e012      	b.n	8001772 <HAL_I2C_Init+0x176>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	1e58      	subs	r0, r3, #1
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6859      	ldr	r1, [r3, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	440b      	add	r3, r1
 800175a:	0099      	lsls	r1, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001762:	3301      	adds	r3, #1
 8001764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001768:	2b00      	cmp	r3, #0
 800176a:	bf0c      	ite	eq
 800176c:	2301      	moveq	r3, #1
 800176e:	2300      	movne	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_I2C_Init+0x17e>
 8001776:	2301      	movs	r3, #1
 8001778:	e022      	b.n	80017c0 <HAL_I2C_Init+0x1c4>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	689b      	ldr	r3, [r3, #8]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10e      	bne.n	80017a0 <HAL_I2C_Init+0x1a4>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1e58      	subs	r0, r3, #1
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6859      	ldr	r1, [r3, #4]
 800178a:	460b      	mov	r3, r1
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	440b      	add	r3, r1
 8001790:	fbb0 f3f3 	udiv	r3, r0, r3
 8001794:	3301      	adds	r3, #1
 8001796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800179a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800179e:	e00f      	b.n	80017c0 <HAL_I2C_Init+0x1c4>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	1e58      	subs	r0, r3, #1
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6859      	ldr	r1, [r3, #4]
 80017a8:	460b      	mov	r3, r1
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	0099      	lsls	r1, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80017b6:	3301      	adds	r3, #1
 80017b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80017bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017c0:	6879      	ldr	r1, [r7, #4]
 80017c2:	6809      	ldr	r1, [r1, #0]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69da      	ldr	r2, [r3, #28]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6a1b      	ldr	r3, [r3, #32]
 80017da:	431a      	orrs	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	430a      	orrs	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80017ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6911      	ldr	r1, [r2, #16]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	68d2      	ldr	r2, [r2, #12]
 80017fa:	4311      	orrs	r1, r2
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	430b      	orrs	r3, r1
 8001802:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695a      	ldr	r2, [r3, #20]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	699b      	ldr	r3, [r3, #24]
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	430a      	orrs	r2, r1
 800181e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f042 0201 	orr.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2220      	movs	r2, #32
 800183a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2200      	movs	r2, #0
 8001842:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	000186a0 	.word	0x000186a0
 800185c:	001e847f 	.word	0x001e847f
 8001860:	003d08ff 	.word	0x003d08ff
 8001864:	431bde83 	.word	0x431bde83
 8001868:	10624dd3 	.word	0x10624dd3

0800186c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b088      	sub	sp, #32
 8001870:	af02      	add	r7, sp, #8
 8001872:	60f8      	str	r0, [r7, #12]
 8001874:	607a      	str	r2, [r7, #4]
 8001876:	461a      	mov	r2, r3
 8001878:	460b      	mov	r3, r1
 800187a:	817b      	strh	r3, [r7, #10]
 800187c:	4613      	mov	r3, r2
 800187e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001880:	f7ff fbfa 	bl	8001078 <HAL_GetTick>
 8001884:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b20      	cmp	r3, #32
 8001890:	f040 80e0 	bne.w	8001a54 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2319      	movs	r3, #25
 800189a:	2201      	movs	r2, #1
 800189c:	4970      	ldr	r1, [pc, #448]	; (8001a60 <HAL_I2C_Master_Transmit+0x1f4>)
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f000 f964 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80018aa:	2302      	movs	r3, #2
 80018ac:	e0d3      	b.n	8001a56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d101      	bne.n	80018bc <HAL_I2C_Master_Transmit+0x50>
 80018b8:	2302      	movs	r3, #2
 80018ba:	e0cc      	b.n	8001a56 <HAL_I2C_Master_Transmit+0x1ea>
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2201      	movs	r2, #1
 80018c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0301 	and.w	r3, r3, #1
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d007      	beq.n	80018e2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f042 0201 	orr.w	r2, r2, #1
 80018e0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681a      	ldr	r2, [r3, #0]
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018f0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2221      	movs	r2, #33	; 0x21
 80018f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2210      	movs	r2, #16
 80018fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2200      	movs	r2, #0
 8001906:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	893a      	ldrh	r2, [r7, #8]
 8001912:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001918:	b29a      	uxth	r2, r3
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4a50      	ldr	r2, [pc, #320]	; (8001a64 <HAL_I2C_Master_Transmit+0x1f8>)
 8001922:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001924:	8979      	ldrh	r1, [r7, #10]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	6a3a      	ldr	r2, [r7, #32]
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f000 f89c 	bl	8001a68 <I2C_MasterRequestWrite>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e08d      	b.n	8001a56 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800193a:	2300      	movs	r3, #0
 800193c:	613b      	str	r3, [r7, #16]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	695b      	ldr	r3, [r3, #20]
 8001944:	613b      	str	r3, [r7, #16]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001950:	e066      	b.n	8001a20 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	6a39      	ldr	r1, [r7, #32]
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f000 f9de 	bl	8001d18 <I2C_WaitOnTXEFlagUntilTimeout>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d00d      	beq.n	800197e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	2b04      	cmp	r3, #4
 8001968:	d107      	bne.n	800197a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001978:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e06b      	b.n	8001a56 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001982:	781a      	ldrb	r2, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001998:	b29b      	uxth	r3, r3
 800199a:	3b01      	subs	r3, #1
 800199c:	b29a      	uxth	r2, r3
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019a6:	3b01      	subs	r3, #1
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b04      	cmp	r3, #4
 80019ba:	d11b      	bne.n	80019f4 <HAL_I2C_Master_Transmit+0x188>
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d017      	beq.n	80019f4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	781a      	ldrb	r2, [r3, #0]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d4:	1c5a      	adds	r2, r3, #1
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019de:	b29b      	uxth	r3, r3
 80019e0:	3b01      	subs	r3, #1
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	6a39      	ldr	r1, [r7, #32]
 80019f8:	68f8      	ldr	r0, [r7, #12]
 80019fa:	f000 f9ce 	bl	8001d9a <I2C_WaitOnBTFFlagUntilTimeout>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d00d      	beq.n	8001a20 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d107      	bne.n	8001a1c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a1a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e01a      	b.n	8001a56 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d194      	bne.n	8001952 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	2220      	movs	r2, #32
 8001a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	e000      	b.n	8001a56 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001a54:	2302      	movs	r3, #2
  }
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3718      	adds	r7, #24
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	00100002 	.word	0x00100002
 8001a64:	ffff0000 	.word	0xffff0000

08001a68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b088      	sub	sp, #32
 8001a6c:	af02      	add	r7, sp, #8
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	607a      	str	r2, [r7, #4]
 8001a72:	603b      	str	r3, [r7, #0]
 8001a74:	460b      	mov	r3, r1
 8001a76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	2b08      	cmp	r3, #8
 8001a82:	d006      	beq.n	8001a92 <I2C_MasterRequestWrite+0x2a>
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d003      	beq.n	8001a92 <I2C_MasterRequestWrite+0x2a>
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a90:	d108      	bne.n	8001aa4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	e00b      	b.n	8001abc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	2b12      	cmp	r3, #18
 8001aaa:	d107      	bne.n	8001abc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001aba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f000 f84f 	bl	8001b6c <I2C_WaitOnFlagUntilTimeout>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d00d      	beq.n	8001af0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ae2:	d103      	bne.n	8001aec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e035      	b.n	8001b5c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001af8:	d108      	bne.n	8001b0c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001afa:	897b      	ldrh	r3, [r7, #10]
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001b08:	611a      	str	r2, [r3, #16]
 8001b0a:	e01b      	b.n	8001b44 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001b0c:	897b      	ldrh	r3, [r7, #10]
 8001b0e:	11db      	asrs	r3, r3, #7
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	f003 0306 	and.w	r3, r3, #6
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f063 030f 	orn	r3, r3, #15
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	490e      	ldr	r1, [pc, #56]	; (8001b64 <I2C_MasterRequestWrite+0xfc>)
 8001b2a:	68f8      	ldr	r0, [r7, #12]
 8001b2c:	f000 f875 	bl	8001c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e010      	b.n	8001b5c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001b3a:	897b      	ldrh	r3, [r7, #10]
 8001b3c:	b2da      	uxtb	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	4907      	ldr	r1, [pc, #28]	; (8001b68 <I2C_MasterRequestWrite+0x100>)
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f000 f865 	bl	8001c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	00010008 	.word	0x00010008
 8001b68:	00010002 	.word	0x00010002

08001b6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	60b9      	str	r1, [r7, #8]
 8001b76:	603b      	str	r3, [r7, #0]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b7c:	e025      	b.n	8001bca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b84:	d021      	beq.n	8001bca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b86:	f7ff fa77 	bl	8001078 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d302      	bcc.n	8001b9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d116      	bne.n	8001bca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2220      	movs	r2, #32
 8001ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f043 0220 	orr.w	r2, r3, #32
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e023      	b.n	8001c12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	0c1b      	lsrs	r3, r3, #16
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d10d      	bne.n	8001bf0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	4013      	ands	r3, r2
 8001be0:	b29b      	uxth	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	bf0c      	ite	eq
 8001be6:	2301      	moveq	r3, #1
 8001be8:	2300      	movne	r3, #0
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	461a      	mov	r2, r3
 8001bee:	e00c      	b.n	8001c0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	bf0c      	ite	eq
 8001c02:	2301      	moveq	r3, #1
 8001c04:	2300      	movne	r3, #0
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	461a      	mov	r2, r3
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d0b6      	beq.n	8001b7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3710      	adds	r7, #16
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c28:	e051      	b.n	8001cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c38:	d123      	bne.n	8001c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001c52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2200      	movs	r2, #0
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	f043 0204 	orr.w	r2, r3, #4
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e046      	b.n	8001d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d021      	beq.n	8001cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c8a:	f7ff f9f5 	bl	8001078 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d302      	bcc.n	8001ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d116      	bne.n	8001cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2220      	movs	r2, #32
 8001caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	f043 0220 	orr.w	r2, r3, #32
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e020      	b.n	8001d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	0c1b      	lsrs	r3, r3, #16
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d10c      	bne.n	8001cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	43da      	mvns	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	bf14      	ite	ne
 8001cea:	2301      	movne	r3, #1
 8001cec:	2300      	moveq	r3, #0
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	e00b      	b.n	8001d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	699b      	ldr	r3, [r3, #24]
 8001cf8:	43da      	mvns	r2, r3
 8001cfa:	68bb      	ldr	r3, [r7, #8]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	bf14      	ite	ne
 8001d04:	2301      	movne	r3, #1
 8001d06:	2300      	moveq	r3, #0
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d18d      	bne.n	8001c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d24:	e02d      	b.n	8001d82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d26:	68f8      	ldr	r0, [r7, #12]
 8001d28:	f000 f878 	bl	8001e1c <I2C_IsAcknowledgeFailed>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e02d      	b.n	8001d92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d3c:	d021      	beq.n	8001d82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3e:	f7ff f99b 	bl	8001078 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	68ba      	ldr	r2, [r7, #8]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d302      	bcc.n	8001d54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d116      	bne.n	8001d82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	2200      	movs	r2, #0
 8001d58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2220      	movs	r2, #32
 8001d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f043 0220 	orr.w	r2, r3, #32
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e007      	b.n	8001d92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8c:	2b80      	cmp	r3, #128	; 0x80
 8001d8e:	d1ca      	bne.n	8001d26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d9a:	b580      	push	{r7, lr}
 8001d9c:	b084      	sub	sp, #16
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	60f8      	str	r0, [r7, #12]
 8001da2:	60b9      	str	r1, [r7, #8]
 8001da4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001da6:	e02d      	b.n	8001e04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 f837 	bl	8001e1c <I2C_IsAcknowledgeFailed>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d001      	beq.n	8001db8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e02d      	b.n	8001e14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dbe:	d021      	beq.n	8001e04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dc0:	f7ff f95a 	bl	8001078 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d302      	bcc.n	8001dd6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d116      	bne.n	8001e04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2220      	movs	r2, #32
 8001de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df0:	f043 0220 	orr.w	r2, r3, #32
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e007      	b.n	8001e14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f003 0304 	and.w	r3, r3, #4
 8001e0e:	2b04      	cmp	r3, #4
 8001e10:	d1ca      	bne.n	8001da8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	695b      	ldr	r3, [r3, #20]
 8001e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e32:	d11b      	bne.n	8001e6c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001e3c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2220      	movs	r2, #32
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f043 0204 	orr.w	r2, r3, #4
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e000      	b.n	8001e6e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e25b      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d075      	beq.n	8001f86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e9a:	4ba3      	ldr	r3, [pc, #652]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d00c      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ea6:	4ba0      	ldr	r3, [pc, #640]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001ea8:	689b      	ldr	r3, [r3, #8]
 8001eaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eae:	2b08      	cmp	r3, #8
 8001eb0:	d112      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb2:	4b9d      	ldr	r3, [pc, #628]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ebe:	d10b      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec0:	4b99      	ldr	r3, [pc, #612]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d05b      	beq.n	8001f84 <HAL_RCC_OscConfig+0x108>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d157      	bne.n	8001f84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e236      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee0:	d106      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x74>
 8001ee2:	4b91      	ldr	r3, [pc, #580]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a90      	ldr	r2, [pc, #576]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	e01d      	b.n	8001f2c <HAL_RCC_OscConfig+0xb0>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ef8:	d10c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x98>
 8001efa:	4b8b      	ldr	r3, [pc, #556]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a8a      	ldr	r2, [pc, #552]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	4b88      	ldr	r3, [pc, #544]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a87      	ldr	r2, [pc, #540]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	e00b      	b.n	8001f2c <HAL_RCC_OscConfig+0xb0>
 8001f14:	4b84      	ldr	r3, [pc, #528]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a83      	ldr	r2, [pc, #524]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001f1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f1e:	6013      	str	r3, [r2, #0]
 8001f20:	4b81      	ldr	r3, [pc, #516]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a80      	ldr	r2, [pc, #512]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d013      	beq.n	8001f5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f34:	f7ff f8a0 	bl	8001078 <HAL_GetTick>
 8001f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f3c:	f7ff f89c 	bl	8001078 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b64      	cmp	r3, #100	; 0x64
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e1fb      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f4e:	4b76      	ldr	r3, [pc, #472]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0xc0>
 8001f5a:	e014      	b.n	8001f86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5c:	f7ff f88c 	bl	8001078 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f64:	f7ff f888 	bl	8001078 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e1e7      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f76:	4b6c      	ldr	r3, [pc, #432]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1f0      	bne.n	8001f64 <HAL_RCC_OscConfig+0xe8>
 8001f82:	e000      	b.n	8001f86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d063      	beq.n	800205a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f92:	4b65      	ldr	r3, [pc, #404]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00b      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f9e:	4b62      	ldr	r3, [pc, #392]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fa6:	2b08      	cmp	r3, #8
 8001fa8:	d11c      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001faa:	4b5f      	ldr	r3, [pc, #380]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d116      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	4b5c      	ldr	r3, [pc, #368]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d005      	beq.n	8001fce <HAL_RCC_OscConfig+0x152>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d001      	beq.n	8001fce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e1bb      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fce:	4b56      	ldr	r3, [pc, #344]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	4952      	ldr	r1, [pc, #328]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe2:	e03a      	b.n	800205a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d020      	beq.n	800202e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fec:	4b4f      	ldr	r3, [pc, #316]	; (800212c <HAL_RCC_OscConfig+0x2b0>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff2:	f7ff f841 	bl	8001078 <HAL_GetTick>
 8001ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff8:	e008      	b.n	800200c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffa:	f7ff f83d 	bl	8001078 <HAL_GetTick>
 8001ffe:	4602      	mov	r2, r0
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	2b02      	cmp	r3, #2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e19c      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800200c:	4b46      	ldr	r3, [pc, #280]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d0f0      	beq.n	8001ffa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002018:	4b43      	ldr	r3, [pc, #268]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	691b      	ldr	r3, [r3, #16]
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4940      	ldr	r1, [pc, #256]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	4313      	orrs	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
 800202c:	e015      	b.n	800205a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800202e:	4b3f      	ldr	r3, [pc, #252]	; (800212c <HAL_RCC_OscConfig+0x2b0>)
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7ff f820 	bl	8001078 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800203c:	f7ff f81c 	bl	8001078 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e17b      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800204e:	4b36      	ldr	r3, [pc, #216]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0302 	and.w	r3, r3, #2
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	d030      	beq.n	80020c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d016      	beq.n	800209c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800206e:	4b30      	ldr	r3, [pc, #192]	; (8002130 <HAL_RCC_OscConfig+0x2b4>)
 8002070:	2201      	movs	r2, #1
 8002072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002074:	f7ff f800 	bl	8001078 <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800207c:	f7fe fffc 	bl	8001078 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e15b      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800208e:	4b26      	ldr	r3, [pc, #152]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 8002090:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d0f0      	beq.n	800207c <HAL_RCC_OscConfig+0x200>
 800209a:	e015      	b.n	80020c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800209c:	4b24      	ldr	r3, [pc, #144]	; (8002130 <HAL_RCC_OscConfig+0x2b4>)
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a2:	f7fe ffe9 	bl	8001078 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a8:	e008      	b.n	80020bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020aa:	f7fe ffe5 	bl	8001078 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	2b02      	cmp	r3, #2
 80020b6:	d901      	bls.n	80020bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020b8:	2303      	movs	r3, #3
 80020ba:	e144      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020bc:	4b1a      	ldr	r3, [pc, #104]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 80020be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1f0      	bne.n	80020aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0304 	and.w	r3, r3, #4
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80a0 	beq.w	8002216 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d6:	2300      	movs	r3, #0
 80020d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020da:	4b13      	ldr	r3, [pc, #76]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 80020dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d10f      	bne.n	8002106 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	4b0f      	ldr	r3, [pc, #60]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	4a0e      	ldr	r2, [pc, #56]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f4:	6413      	str	r3, [r2, #64]	; 0x40
 80020f6:	4b0c      	ldr	r3, [pc, #48]	; (8002128 <HAL_RCC_OscConfig+0x2ac>)
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002102:	2301      	movs	r3, #1
 8002104:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_OscConfig+0x2b8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800210e:	2b00      	cmp	r3, #0
 8002110:	d121      	bne.n	8002156 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002112:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_RCC_OscConfig+0x2b8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a07      	ldr	r2, [pc, #28]	; (8002134 <HAL_RCC_OscConfig+0x2b8>)
 8002118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800211e:	f7fe ffab 	bl	8001078 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002124:	e011      	b.n	800214a <HAL_RCC_OscConfig+0x2ce>
 8002126:	bf00      	nop
 8002128:	40023800 	.word	0x40023800
 800212c:	42470000 	.word	0x42470000
 8002130:	42470e80 	.word	0x42470e80
 8002134:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002138:	f7fe ff9e 	bl	8001078 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e0fd      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214a:	4b81      	ldr	r3, [pc, #516]	; (8002350 <HAL_RCC_OscConfig+0x4d4>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d106      	bne.n	800216c <HAL_RCC_OscConfig+0x2f0>
 800215e:	4b7d      	ldr	r3, [pc, #500]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002162:	4a7c      	ldr	r2, [pc, #496]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002164:	f043 0301 	orr.w	r3, r3, #1
 8002168:	6713      	str	r3, [r2, #112]	; 0x70
 800216a:	e01c      	b.n	80021a6 <HAL_RCC_OscConfig+0x32a>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	2b05      	cmp	r3, #5
 8002172:	d10c      	bne.n	800218e <HAL_RCC_OscConfig+0x312>
 8002174:	4b77      	ldr	r3, [pc, #476]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002178:	4a76      	ldr	r2, [pc, #472]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 800217a:	f043 0304 	orr.w	r3, r3, #4
 800217e:	6713      	str	r3, [r2, #112]	; 0x70
 8002180:	4b74      	ldr	r3, [pc, #464]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002184:	4a73      	ldr	r2, [pc, #460]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6713      	str	r3, [r2, #112]	; 0x70
 800218c:	e00b      	b.n	80021a6 <HAL_RCC_OscConfig+0x32a>
 800218e:	4b71      	ldr	r3, [pc, #452]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	4a70      	ldr	r2, [pc, #448]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002194:	f023 0301 	bic.w	r3, r3, #1
 8002198:	6713      	str	r3, [r2, #112]	; 0x70
 800219a:	4b6e      	ldr	r3, [pc, #440]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	4a6d      	ldr	r2, [pc, #436]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 80021a0:	f023 0304 	bic.w	r3, r3, #4
 80021a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d015      	beq.n	80021da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ae:	f7fe ff63 	bl	8001078 <HAL_GetTick>
 80021b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b4:	e00a      	b.n	80021cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b6:	f7fe ff5f 	bl	8001078 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e0bc      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021cc:	4b61      	ldr	r3, [pc, #388]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 80021ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d0:	f003 0302 	and.w	r3, r3, #2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0ee      	beq.n	80021b6 <HAL_RCC_OscConfig+0x33a>
 80021d8:	e014      	b.n	8002204 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021da:	f7fe ff4d 	bl	8001078 <HAL_GetTick>
 80021de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e0:	e00a      	b.n	80021f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e2:	f7fe ff49 	bl	8001078 <HAL_GetTick>
 80021e6:	4602      	mov	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e0a6      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f8:	4b56      	ldr	r3, [pc, #344]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 80021fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1ee      	bne.n	80021e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002204:	7dfb      	ldrb	r3, [r7, #23]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d105      	bne.n	8002216 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220a:	4b52      	ldr	r3, [pc, #328]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	4a51      	ldr	r2, [pc, #324]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002210:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002214:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	2b00      	cmp	r3, #0
 800221c:	f000 8092 	beq.w	8002344 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002220:	4b4c      	ldr	r3, [pc, #304]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b08      	cmp	r3, #8
 800222a:	d05c      	beq.n	80022e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	2b02      	cmp	r3, #2
 8002232:	d141      	bne.n	80022b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002234:	4b48      	ldr	r3, [pc, #288]	; (8002358 <HAL_RCC_OscConfig+0x4dc>)
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223a:	f7fe ff1d 	bl	8001078 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002242:	f7fe ff19 	bl	8001078 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e078      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002254:	4b3f      	ldr	r3, [pc, #252]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f0      	bne.n	8002242 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69da      	ldr	r2, [r3, #28]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	019b      	lsls	r3, r3, #6
 8002270:	431a      	orrs	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	085b      	lsrs	r3, r3, #1
 8002278:	3b01      	subs	r3, #1
 800227a:	041b      	lsls	r3, r3, #16
 800227c:	431a      	orrs	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	061b      	lsls	r3, r3, #24
 8002284:	4933      	ldr	r1, [pc, #204]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 8002286:	4313      	orrs	r3, r2
 8002288:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800228a:	4b33      	ldr	r3, [pc, #204]	; (8002358 <HAL_RCC_OscConfig+0x4dc>)
 800228c:	2201      	movs	r2, #1
 800228e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7fe fef2 	bl	8001078 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002298:	f7fe feee 	bl	8001078 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e04d      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022aa:	4b2a      	ldr	r3, [pc, #168]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0x41c>
 80022b6:	e045      	b.n	8002344 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b8:	4b27      	ldr	r3, [pc, #156]	; (8002358 <HAL_RCC_OscConfig+0x4dc>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022be:	f7fe fedb 	bl	8001078 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022c6:	f7fe fed7 	bl	8001078 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e036      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022d8:	4b1e      	ldr	r3, [pc, #120]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1f0      	bne.n	80022c6 <HAL_RCC_OscConfig+0x44a>
 80022e4:	e02e      	b.n	8002344 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d101      	bne.n	80022f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022ee:	2301      	movs	r3, #1
 80022f0:	e029      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022f2:	4b18      	ldr	r3, [pc, #96]	; (8002354 <HAL_RCC_OscConfig+0x4d8>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	429a      	cmp	r2, r3
 8002304:	d11c      	bne.n	8002340 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002310:	429a      	cmp	r2, r3
 8002312:	d115      	bne.n	8002340 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800231a:	4013      	ands	r3, r2
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002320:	4293      	cmp	r3, r2
 8002322:	d10d      	bne.n	8002340 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800232e:	429a      	cmp	r2, r3
 8002330:	d106      	bne.n	8002340 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800233c:	429a      	cmp	r2, r3
 800233e:	d001      	beq.n	8002344 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e000      	b.n	8002346 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40007000 	.word	0x40007000
 8002354:	40023800 	.word	0x40023800
 8002358:	42470060 	.word	0x42470060

0800235c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e0cc      	b.n	800250a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002370:	4b68      	ldr	r3, [pc, #416]	; (8002514 <HAL_RCC_ClockConfig+0x1b8>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d90c      	bls.n	8002398 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b65      	ldr	r3, [pc, #404]	; (8002514 <HAL_RCC_ClockConfig+0x1b8>)
 8002380:	683a      	ldr	r2, [r7, #0]
 8002382:	b2d2      	uxtb	r2, r2
 8002384:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002386:	4b63      	ldr	r3, [pc, #396]	; (8002514 <HAL_RCC_ClockConfig+0x1b8>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	429a      	cmp	r2, r3
 8002392:	d001      	beq.n	8002398 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0b8      	b.n	800250a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d020      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d005      	beq.n	80023bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023b0:	4b59      	ldr	r3, [pc, #356]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	4a58      	ldr	r2, [pc, #352]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0308 	and.w	r3, r3, #8
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c8:	4b53      	ldr	r3, [pc, #332]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	4a52      	ldr	r2, [pc, #328]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80023ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d4:	4b50      	ldr	r3, [pc, #320]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	494d      	ldr	r1, [pc, #308]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d044      	beq.n	800247c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b01      	cmp	r3, #1
 80023f8:	d107      	bne.n	800240a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023fa:	4b47      	ldr	r3, [pc, #284]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d119      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e07f      	b.n	800250a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b02      	cmp	r3, #2
 8002410:	d003      	beq.n	800241a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002416:	2b03      	cmp	r3, #3
 8002418:	d107      	bne.n	800242a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800241a:	4b3f      	ldr	r3, [pc, #252]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d109      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e06f      	b.n	800250a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242a:	4b3b      	ldr	r3, [pc, #236]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e067      	b.n	800250a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800243a:	4b37      	ldr	r3, [pc, #220]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f023 0203 	bic.w	r2, r3, #3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4934      	ldr	r1, [pc, #208]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 8002448:	4313      	orrs	r3, r2
 800244a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800244c:	f7fe fe14 	bl	8001078 <HAL_GetTick>
 8002450:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	e00a      	b.n	800246a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002454:	f7fe fe10 	bl	8001078 <HAL_GetTick>
 8002458:	4602      	mov	r2, r0
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002462:	4293      	cmp	r3, r2
 8002464:	d901      	bls.n	800246a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e04f      	b.n	800250a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800246a:	4b2b      	ldr	r3, [pc, #172]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 020c 	and.w	r2, r3, #12
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	429a      	cmp	r2, r3
 800247a:	d1eb      	bne.n	8002454 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800247c:	4b25      	ldr	r3, [pc, #148]	; (8002514 <HAL_RCC_ClockConfig+0x1b8>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 030f 	and.w	r3, r3, #15
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d20c      	bcs.n	80024a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248a:	4b22      	ldr	r3, [pc, #136]	; (8002514 <HAL_RCC_ClockConfig+0x1b8>)
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002492:	4b20      	ldr	r3, [pc, #128]	; (8002514 <HAL_RCC_ClockConfig+0x1b8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	683a      	ldr	r2, [r7, #0]
 800249c:	429a      	cmp	r2, r3
 800249e:	d001      	beq.n	80024a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e032      	b.n	800250a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024b0:	4b19      	ldr	r3, [pc, #100]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	4916      	ldr	r1, [pc, #88]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0308 	and.w	r3, r3, #8
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d009      	beq.n	80024e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024ce:	4b12      	ldr	r3, [pc, #72]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	691b      	ldr	r3, [r3, #16]
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	490e      	ldr	r1, [pc, #56]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024e2:	f000 f821 	bl	8002528 <HAL_RCC_GetSysClockFreq>
 80024e6:	4601      	mov	r1, r0
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <HAL_RCC_ClockConfig+0x1bc>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	091b      	lsrs	r3, r3, #4
 80024ee:	f003 030f 	and.w	r3, r3, #15
 80024f2:	4a0a      	ldr	r2, [pc, #40]	; (800251c <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	5cd3      	ldrb	r3, [r2, r3]
 80024f6:	fa21 f303 	lsr.w	r3, r1, r3
 80024fa:	4a09      	ldr	r2, [pc, #36]	; (8002520 <HAL_RCC_ClockConfig+0x1c4>)
 80024fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_RCC_ClockConfig+0x1c8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4618      	mov	r0, r3
 8002504:	f7fe fd74 	bl	8000ff0 <HAL_InitTick>

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40023c00 	.word	0x40023c00
 8002518:	40023800 	.word	0x40023800
 800251c:	08003eb0 	.word	0x08003eb0
 8002520:	20000000 	.word	0x20000000
 8002524:	20000004 	.word	0x20000004

08002528 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	607b      	str	r3, [r7, #4]
 8002532:	2300      	movs	r3, #0
 8002534:	60fb      	str	r3, [r7, #12]
 8002536:	2300      	movs	r3, #0
 8002538:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800253e:	4b50      	ldr	r3, [pc, #320]	; (8002680 <HAL_RCC_GetSysClockFreq+0x158>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f003 030c 	and.w	r3, r3, #12
 8002546:	2b04      	cmp	r3, #4
 8002548:	d007      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0x32>
 800254a:	2b08      	cmp	r3, #8
 800254c:	d008      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x38>
 800254e:	2b00      	cmp	r3, #0
 8002550:	f040 808d 	bne.w	800266e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002554:	4b4b      	ldr	r3, [pc, #300]	; (8002684 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002556:	60bb      	str	r3, [r7, #8]
       break;
 8002558:	e08c      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800255a:	4b4b      	ldr	r3, [pc, #300]	; (8002688 <HAL_RCC_GetSysClockFreq+0x160>)
 800255c:	60bb      	str	r3, [r7, #8]
      break;
 800255e:	e089      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002560:	4b47      	ldr	r3, [pc, #284]	; (8002680 <HAL_RCC_GetSysClockFreq+0x158>)
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002568:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800256a:	4b45      	ldr	r3, [pc, #276]	; (8002680 <HAL_RCC_GetSysClockFreq+0x158>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d023      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002576:	4b42      	ldr	r3, [pc, #264]	; (8002680 <HAL_RCC_GetSysClockFreq+0x158>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	099b      	lsrs	r3, r3, #6
 800257c:	f04f 0400 	mov.w	r4, #0
 8002580:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002584:	f04f 0200 	mov.w	r2, #0
 8002588:	ea03 0501 	and.w	r5, r3, r1
 800258c:	ea04 0602 	and.w	r6, r4, r2
 8002590:	4a3d      	ldr	r2, [pc, #244]	; (8002688 <HAL_RCC_GetSysClockFreq+0x160>)
 8002592:	fb02 f106 	mul.w	r1, r2, r6
 8002596:	2200      	movs	r2, #0
 8002598:	fb02 f205 	mul.w	r2, r2, r5
 800259c:	440a      	add	r2, r1
 800259e:	493a      	ldr	r1, [pc, #232]	; (8002688 <HAL_RCC_GetSysClockFreq+0x160>)
 80025a0:	fba5 0101 	umull	r0, r1, r5, r1
 80025a4:	1853      	adds	r3, r2, r1
 80025a6:	4619      	mov	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	f04f 0400 	mov.w	r4, #0
 80025ae:	461a      	mov	r2, r3
 80025b0:	4623      	mov	r3, r4
 80025b2:	f7fd fe65 	bl	8000280 <__aeabi_uldivmod>
 80025b6:	4603      	mov	r3, r0
 80025b8:	460c      	mov	r4, r1
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	e049      	b.n	8002652 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025be:	4b30      	ldr	r3, [pc, #192]	; (8002680 <HAL_RCC_GetSysClockFreq+0x158>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	099b      	lsrs	r3, r3, #6
 80025c4:	f04f 0400 	mov.w	r4, #0
 80025c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	ea03 0501 	and.w	r5, r3, r1
 80025d4:	ea04 0602 	and.w	r6, r4, r2
 80025d8:	4629      	mov	r1, r5
 80025da:	4632      	mov	r2, r6
 80025dc:	f04f 0300 	mov.w	r3, #0
 80025e0:	f04f 0400 	mov.w	r4, #0
 80025e4:	0154      	lsls	r4, r2, #5
 80025e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025ea:	014b      	lsls	r3, r1, #5
 80025ec:	4619      	mov	r1, r3
 80025ee:	4622      	mov	r2, r4
 80025f0:	1b49      	subs	r1, r1, r5
 80025f2:	eb62 0206 	sbc.w	r2, r2, r6
 80025f6:	f04f 0300 	mov.w	r3, #0
 80025fa:	f04f 0400 	mov.w	r4, #0
 80025fe:	0194      	lsls	r4, r2, #6
 8002600:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002604:	018b      	lsls	r3, r1, #6
 8002606:	1a5b      	subs	r3, r3, r1
 8002608:	eb64 0402 	sbc.w	r4, r4, r2
 800260c:	f04f 0100 	mov.w	r1, #0
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	00e2      	lsls	r2, r4, #3
 8002616:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800261a:	00d9      	lsls	r1, r3, #3
 800261c:	460b      	mov	r3, r1
 800261e:	4614      	mov	r4, r2
 8002620:	195b      	adds	r3, r3, r5
 8002622:	eb44 0406 	adc.w	r4, r4, r6
 8002626:	f04f 0100 	mov.w	r1, #0
 800262a:	f04f 0200 	mov.w	r2, #0
 800262e:	02a2      	lsls	r2, r4, #10
 8002630:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002634:	0299      	lsls	r1, r3, #10
 8002636:	460b      	mov	r3, r1
 8002638:	4614      	mov	r4, r2
 800263a:	4618      	mov	r0, r3
 800263c:	4621      	mov	r1, r4
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f04f 0400 	mov.w	r4, #0
 8002644:	461a      	mov	r2, r3
 8002646:	4623      	mov	r3, r4
 8002648:	f7fd fe1a 	bl	8000280 <__aeabi_uldivmod>
 800264c:	4603      	mov	r3, r0
 800264e:	460c      	mov	r4, r1
 8002650:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002652:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_RCC_GetSysClockFreq+0x158>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	0c1b      	lsrs	r3, r3, #16
 8002658:	f003 0303 	and.w	r3, r3, #3
 800265c:	3301      	adds	r3, #1
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	fbb2 f3f3 	udiv	r3, r2, r3
 800266a:	60bb      	str	r3, [r7, #8]
      break;
 800266c:	e002      	b.n	8002674 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800266e:	4b05      	ldr	r3, [pc, #20]	; (8002684 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002670:	60bb      	str	r3, [r7, #8]
      break;
 8002672:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002674:	68bb      	ldr	r3, [r7, #8]
}
 8002676:	4618      	mov	r0, r3
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
 8002684:	00f42400 	.word	0x00f42400
 8002688:	017d7840 	.word	0x017d7840

0800268c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002690:	4b03      	ldr	r3, [pc, #12]	; (80026a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002692:	681b      	ldr	r3, [r3, #0]
}
 8002694:	4618      	mov	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000000 	.word	0x20000000

080026a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026a8:	f7ff fff0 	bl	800268c <HAL_RCC_GetHCLKFreq>
 80026ac:	4601      	mov	r1, r0
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	0a9b      	lsrs	r3, r3, #10
 80026b4:	f003 0307 	and.w	r3, r3, #7
 80026b8:	4a03      	ldr	r2, [pc, #12]	; (80026c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026ba:	5cd3      	ldrb	r3, [r2, r3]
 80026bc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40023800 	.word	0x40023800
 80026c8:	08003ec0 	.word	0x08003ec0

080026cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e01d      	b.n	800271a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d106      	bne.n	80026f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fe fb50 	bl	8000d98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	3304      	adds	r3, #4
 8002708:	4619      	mov	r1, r3
 800270a:	4610      	mov	r0, r2
 800270c:	f000 fba6 	bl	8002e5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
	...

08002724 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2201      	movs	r2, #1
 8002734:	6839      	ldr	r1, [r7, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f000 feba 	bl	80034b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a10      	ldr	r2, [pc, #64]	; (8002784 <HAL_TIM_PWM_Start+0x60>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d107      	bne.n	8002756 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002754:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 0307 	and.w	r3, r3, #7
 8002760:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b06      	cmp	r3, #6
 8002766:	d007      	beq.n	8002778 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0201 	orr.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40010000 	.word	0x40010000

08002788 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e01d      	b.n	80027d6 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d106      	bne.n	80027b4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f7fe faa4 	bl	8000cfc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3304      	adds	r3, #4
 80027c4:	4619      	mov	r1, r3
 80027c6:	4610      	mov	r0, r2
 80027c8:	f000 fb48 	bl	8002e5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
	...

080027e0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	2b0c      	cmp	r3, #12
 80027ee:	d841      	bhi.n	8002874 <HAL_TIM_IC_Start_IT+0x94>
 80027f0:	a201      	add	r2, pc, #4	; (adr r2, 80027f8 <HAL_TIM_IC_Start_IT+0x18>)
 80027f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f6:	bf00      	nop
 80027f8:	0800282d 	.word	0x0800282d
 80027fc:	08002875 	.word	0x08002875
 8002800:	08002875 	.word	0x08002875
 8002804:	08002875 	.word	0x08002875
 8002808:	0800283f 	.word	0x0800283f
 800280c:	08002875 	.word	0x08002875
 8002810:	08002875 	.word	0x08002875
 8002814:	08002875 	.word	0x08002875
 8002818:	08002851 	.word	0x08002851
 800281c:	08002875 	.word	0x08002875
 8002820:	08002875 	.word	0x08002875
 8002824:	08002875 	.word	0x08002875
 8002828:	08002863 	.word	0x08002863
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	68da      	ldr	r2, [r3, #12]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0202 	orr.w	r2, r2, #2
 800283a:	60da      	str	r2, [r3, #12]
      break;
 800283c:	e01b      	b.n	8002876 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68da      	ldr	r2, [r3, #12]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f042 0204 	orr.w	r2, r2, #4
 800284c:	60da      	str	r2, [r3, #12]
      break;
 800284e:	e012      	b.n	8002876 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f042 0208 	orr.w	r2, r2, #8
 800285e:	60da      	str	r2, [r3, #12]
      break;
 8002860:	e009      	b.n	8002876 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0210 	orr.w	r2, r2, #16
 8002870:	60da      	str	r2, [r3, #12]
      break;
 8002872:	e000      	b.n	8002876 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8002874:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2201      	movs	r2, #1
 800287c:	6839      	ldr	r1, [r7, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f000 fe16 	bl	80034b0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 0307 	and.w	r3, r3, #7
 800288e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2b06      	cmp	r3, #6
 8002894:	d007      	beq.n	80028a6 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f042 0201 	orr.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d122      	bne.n	800290c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d11b      	bne.n	800290c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f06f 0202 	mvn.w	r2, #2
 80028dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d003      	beq.n	80028fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7fd ff2a 	bl	800074c <HAL_TIM_IC_CaptureCallback>
 80028f8:	e005      	b.n	8002906 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f000 fa90 	bl	8002e20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f000 fa97 	bl	8002e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2200      	movs	r2, #0
 800290a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0304 	and.w	r3, r3, #4
 8002916:	2b04      	cmp	r3, #4
 8002918:	d122      	bne.n	8002960 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b04      	cmp	r3, #4
 8002926:	d11b      	bne.n	8002960 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0204 	mvn.w	r2, #4
 8002930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2202      	movs	r2, #2
 8002936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	699b      	ldr	r3, [r3, #24]
 800293e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002942:	2b00      	cmp	r3, #0
 8002944:	d003      	beq.n	800294e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7fd ff00 	bl	800074c <HAL_TIM_IC_CaptureCallback>
 800294c:	e005      	b.n	800295a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fa66 	bl	8002e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 fa6d 	bl	8002e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691b      	ldr	r3, [r3, #16]
 8002966:	f003 0308 	and.w	r3, r3, #8
 800296a:	2b08      	cmp	r3, #8
 800296c:	d122      	bne.n	80029b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	f003 0308 	and.w	r3, r3, #8
 8002978:	2b08      	cmp	r3, #8
 800297a:	d11b      	bne.n	80029b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f06f 0208 	mvn.w	r2, #8
 8002984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2204      	movs	r2, #4
 800298a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f003 0303 	and.w	r3, r3, #3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7fd fed6 	bl	800074c <HAL_TIM_IC_CaptureCallback>
 80029a0:	e005      	b.n	80029ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f000 fa3c 	bl	8002e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 fa43 	bl	8002e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	f003 0310 	and.w	r3, r3, #16
 80029be:	2b10      	cmp	r3, #16
 80029c0:	d122      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	f003 0310 	and.w	r3, r3, #16
 80029cc:	2b10      	cmp	r3, #16
 80029ce:	d11b      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f06f 0210 	mvn.w	r2, #16
 80029d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2208      	movs	r2, #8
 80029de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	69db      	ldr	r3, [r3, #28]
 80029e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f7fd feac 	bl	800074c <HAL_TIM_IC_CaptureCallback>
 80029f4:	e005      	b.n	8002a02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 fa12 	bl	8002e20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f000 fa19 	bl	8002e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b01      	cmp	r3, #1
 8002a14:	d10e      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d107      	bne.n	8002a34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f06f 0201 	mvn.w	r2, #1
 8002a2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f9ec 	bl	8002e0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	691b      	ldr	r3, [r3, #16]
 8002a3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a3e:	2b80      	cmp	r3, #128	; 0x80
 8002a40:	d10e      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4c:	2b80      	cmp	r3, #128	; 0x80
 8002a4e:	d107      	bne.n	8002a60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 fdc6 	bl	80035ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6a:	2b40      	cmp	r3, #64	; 0x40
 8002a6c:	d10e      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d107      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f9de 	bl	8002e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0320 	and.w	r3, r3, #32
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	d10e      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0320 	and.w	r3, r3, #32
 8002aa4:	2b20      	cmp	r3, #32
 8002aa6:	d107      	bne.n	8002ab8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0220 	mvn.w	r2, #32
 8002ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 fd90 	bl	80035d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ab8:	bf00      	nop
 8002aba:	3708      	adds	r7, #8
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d101      	bne.n	8002ada <HAL_TIM_IC_ConfigChannel+0x1a>
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	e08a      	b.n	8002bf0 <HAL_TIM_IC_ConfigChannel+0x130>
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d11b      	bne.n	8002b28 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	6819      	ldr	r1, [r3, #0]
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f000 fbb8 	bl	8003274 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699a      	ldr	r2, [r3, #24]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f022 020c 	bic.w	r2, r2, #12
 8002b12:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6999      	ldr	r1, [r3, #24]
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	619a      	str	r2, [r3, #24]
 8002b26:	e05a      	b.n	8002bde <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d11c      	bne.n	8002b68 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	6819      	ldr	r1, [r3, #0]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	f000 fc01 	bl	8003344 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	699a      	ldr	r2, [r3, #24]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002b50:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6999      	ldr	r1, [r3, #24]
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	021a      	lsls	r2, r3, #8
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	619a      	str	r2, [r3, #24]
 8002b66:	e03a      	b.n	8002bde <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d11b      	bne.n	8002ba6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6818      	ldr	r0, [r3, #0]
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	6819      	ldr	r1, [r3, #0]
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	f000 fc1e 	bl	80033be <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	69da      	ldr	r2, [r3, #28]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f022 020c 	bic.w	r2, r2, #12
 8002b90:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	69d9      	ldr	r1, [r3, #28]
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	61da      	str	r2, [r3, #28]
 8002ba4:	e01b      	b.n	8002bde <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6818      	ldr	r0, [r3, #0]
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	6819      	ldr	r1, [r3, #0]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f000 fc3e 	bl	8003436 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	69da      	ldr	r2, [r3, #28]
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002bc8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	69d9      	ldr	r1, [r3, #28]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	021a      	lsls	r2, r3, #8
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	430a      	orrs	r2, r1
 8002bdc:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}

08002bf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d101      	bne.n	8002c12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002c0e:	2302      	movs	r3, #2
 8002c10:	e0b4      	b.n	8002d7c <HAL_TIM_PWM_ConfigChannel+0x184>
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2202      	movs	r2, #2
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2b0c      	cmp	r3, #12
 8002c26:	f200 809f 	bhi.w	8002d68 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002c2a:	a201      	add	r2, pc, #4	; (adr r2, 8002c30 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c30:	08002c65 	.word	0x08002c65
 8002c34:	08002d69 	.word	0x08002d69
 8002c38:	08002d69 	.word	0x08002d69
 8002c3c:	08002d69 	.word	0x08002d69
 8002c40:	08002ca5 	.word	0x08002ca5
 8002c44:	08002d69 	.word	0x08002d69
 8002c48:	08002d69 	.word	0x08002d69
 8002c4c:	08002d69 	.word	0x08002d69
 8002c50:	08002ce7 	.word	0x08002ce7
 8002c54:	08002d69 	.word	0x08002d69
 8002c58:	08002d69 	.word	0x08002d69
 8002c5c:	08002d69 	.word	0x08002d69
 8002c60:	08002d27 	.word	0x08002d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	68b9      	ldr	r1, [r7, #8]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f000 f976 	bl	8002f5c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0208 	orr.w	r2, r2, #8
 8002c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0204 	bic.w	r2, r2, #4
 8002c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6999      	ldr	r1, [r3, #24]
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	691a      	ldr	r2, [r3, #16]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	430a      	orrs	r2, r1
 8002ca0:	619a      	str	r2, [r3, #24]
      break;
 8002ca2:	e062      	b.n	8002d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68b9      	ldr	r1, [r7, #8]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f9bc 	bl	8003028 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	699a      	ldr	r2, [r3, #24]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	699a      	ldr	r2, [r3, #24]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6999      	ldr	r1, [r3, #24]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	021a      	lsls	r2, r3, #8
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	619a      	str	r2, [r3, #24]
      break;
 8002ce4:	e041      	b.n	8002d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68b9      	ldr	r1, [r7, #8]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fa07 	bl	8003100 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	69da      	ldr	r2, [r3, #28]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f042 0208 	orr.w	r2, r2, #8
 8002d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	69da      	ldr	r2, [r3, #28]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0204 	bic.w	r2, r2, #4
 8002d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	69d9      	ldr	r1, [r3, #28]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	691a      	ldr	r2, [r3, #16]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	430a      	orrs	r2, r1
 8002d22:	61da      	str	r2, [r3, #28]
      break;
 8002d24:	e021      	b.n	8002d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68b9      	ldr	r1, [r7, #8]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 fa51 	bl	80031d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	69da      	ldr	r2, [r3, #28]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69da      	ldr	r2, [r3, #28]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	69d9      	ldr	r1, [r3, #28]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	021a      	lsls	r2, r3, #8
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	61da      	str	r2, [r3, #28]
      break;
 8002d66:	e000      	b.n	8002d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8002d68:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b0c      	cmp	r3, #12
 8002d96:	d831      	bhi.n	8002dfc <HAL_TIM_ReadCapturedValue+0x78>
 8002d98:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8002d9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d9e:	bf00      	nop
 8002da0:	08002dd5 	.word	0x08002dd5
 8002da4:	08002dfd 	.word	0x08002dfd
 8002da8:	08002dfd 	.word	0x08002dfd
 8002dac:	08002dfd 	.word	0x08002dfd
 8002db0:	08002ddf 	.word	0x08002ddf
 8002db4:	08002dfd 	.word	0x08002dfd
 8002db8:	08002dfd 	.word	0x08002dfd
 8002dbc:	08002dfd 	.word	0x08002dfd
 8002dc0:	08002de9 	.word	0x08002de9
 8002dc4:	08002dfd 	.word	0x08002dfd
 8002dc8:	08002dfd 	.word	0x08002dfd
 8002dcc:	08002dfd 	.word	0x08002dfd
 8002dd0:	08002df3 	.word	0x08002df3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dda:	60fb      	str	r3, [r7, #12]

      break;
 8002ddc:	e00f      	b.n	8002dfe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de4:	60fb      	str	r3, [r7, #12]

      break;
 8002de6:	e00a      	b.n	8002dfe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dee:	60fb      	str	r3, [r7, #12]

      break;
 8002df0:	e005      	b.n	8002dfe <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	60fb      	str	r3, [r7, #12]

      break;
 8002dfa:	e000      	b.n	8002dfe <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002dfc:	bf00      	nop
  }

  return tmpreg;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a34      	ldr	r2, [pc, #208]	; (8002f40 <TIM_Base_SetConfig+0xe4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00f      	beq.n	8002e94 <TIM_Base_SetConfig+0x38>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e7a:	d00b      	beq.n	8002e94 <TIM_Base_SetConfig+0x38>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a31      	ldr	r2, [pc, #196]	; (8002f44 <TIM_Base_SetConfig+0xe8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d007      	beq.n	8002e94 <TIM_Base_SetConfig+0x38>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4a30      	ldr	r2, [pc, #192]	; (8002f48 <TIM_Base_SetConfig+0xec>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d003      	beq.n	8002e94 <TIM_Base_SetConfig+0x38>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	4a2f      	ldr	r2, [pc, #188]	; (8002f4c <TIM_Base_SetConfig+0xf0>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d108      	bne.n	8002ea6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	68fa      	ldr	r2, [r7, #12]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a25      	ldr	r2, [pc, #148]	; (8002f40 <TIM_Base_SetConfig+0xe4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d01b      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb4:	d017      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a22      	ldr	r2, [pc, #136]	; (8002f44 <TIM_Base_SetConfig+0xe8>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d013      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a21      	ldr	r2, [pc, #132]	; (8002f48 <TIM_Base_SetConfig+0xec>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d00f      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a20      	ldr	r2, [pc, #128]	; (8002f4c <TIM_Base_SetConfig+0xf0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d00b      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a1f      	ldr	r2, [pc, #124]	; (8002f50 <TIM_Base_SetConfig+0xf4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d007      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a1e      	ldr	r2, [pc, #120]	; (8002f54 <TIM_Base_SetConfig+0xf8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d003      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8a>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a1d      	ldr	r2, [pc, #116]	; (8002f58 <TIM_Base_SetConfig+0xfc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d108      	bne.n	8002ef8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002eec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	689a      	ldr	r2, [r3, #8]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a08      	ldr	r2, [pc, #32]	; (8002f40 <TIM_Base_SetConfig+0xe4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d103      	bne.n	8002f2c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	615a      	str	r2, [r3, #20]
}
 8002f32:	bf00      	nop
 8002f34:	3714      	adds	r7, #20
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40010000 	.word	0x40010000
 8002f44:	40000400 	.word	0x40000400
 8002f48:	40000800 	.word	0x40000800
 8002f4c:	40000c00 	.word	0x40000c00
 8002f50:	40014000 	.word	0x40014000
 8002f54:	40014400 	.word	0x40014400
 8002f58:	40014800 	.word	0x40014800

08002f5c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b087      	sub	sp, #28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	f023 0201 	bic.w	r2, r3, #1
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f023 0303 	bic.w	r3, r3, #3
 8002f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f023 0302 	bic.w	r3, r3, #2
 8002fa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a1c      	ldr	r2, [pc, #112]	; (8003024 <TIM_OC1_SetConfig+0xc8>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d10c      	bne.n	8002fd2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f023 0308 	bic.w	r3, r3, #8
 8002fbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f023 0304 	bic.w	r3, r3, #4
 8002fd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a13      	ldr	r2, [pc, #76]	; (8003024 <TIM_OC1_SetConfig+0xc8>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d111      	bne.n	8002ffe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fe0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002fe8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	693a      	ldr	r2, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	68fa      	ldr	r2, [r7, #12]
 8003008:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	621a      	str	r2, [r3, #32]
}
 8003018:	bf00      	nop
 800301a:	371c      	adds	r7, #28
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	40010000 	.word	0x40010000

08003028 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003028:	b480      	push	{r7}
 800302a:	b087      	sub	sp, #28
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	f023 0210 	bic.w	r2, r3, #16
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800305e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	021b      	lsls	r3, r3, #8
 8003066:	68fa      	ldr	r2, [r7, #12]
 8003068:	4313      	orrs	r3, r2
 800306a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	f023 0320 	bic.w	r3, r3, #32
 8003072:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	697a      	ldr	r2, [r7, #20]
 800307c:	4313      	orrs	r3, r2
 800307e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	4a1e      	ldr	r2, [pc, #120]	; (80030fc <TIM_OC2_SetConfig+0xd4>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d10d      	bne.n	80030a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800308e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	011b      	lsls	r3, r3, #4
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	4313      	orrs	r3, r2
 800309a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a15      	ldr	r2, [pc, #84]	; (80030fc <TIM_OC2_SetConfig+0xd4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d113      	bne.n	80030d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	695b      	ldr	r3, [r3, #20]
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685a      	ldr	r2, [r3, #4]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	621a      	str	r2, [r3, #32]
}
 80030ee:	bf00      	nop
 80030f0:	371c      	adds	r7, #28
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	40010000 	.word	0x40010000

08003100 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003100:	b480      	push	{r7}
 8003102:	b087      	sub	sp, #28
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0303 	bic.w	r3, r3, #3
 8003136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	021b      	lsls	r3, r3, #8
 8003150:	697a      	ldr	r2, [r7, #20]
 8003152:	4313      	orrs	r3, r2
 8003154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a1d      	ldr	r2, [pc, #116]	; (80031d0 <TIM_OC3_SetConfig+0xd0>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d10d      	bne.n	800317a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003164:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	68db      	ldr	r3, [r3, #12]
 800316a:	021b      	lsls	r3, r3, #8
 800316c:	697a      	ldr	r2, [r7, #20]
 800316e:	4313      	orrs	r3, r2
 8003170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a14      	ldr	r2, [pc, #80]	; (80031d0 <TIM_OC3_SetConfig+0xd0>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d113      	bne.n	80031aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003188:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003190:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	693a      	ldr	r2, [r7, #16]
 800319a:	4313      	orrs	r3, r2
 800319c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68fa      	ldr	r2, [r7, #12]
 80031b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	621a      	str	r2, [r3, #32]
}
 80031c4:	bf00      	nop
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	40010000 	.word	0x40010000

080031d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003202:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800320a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	021b      	lsls	r3, r3, #8
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4313      	orrs	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800321e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	689b      	ldr	r3, [r3, #8]
 8003224:	031b      	lsls	r3, r3, #12
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a10      	ldr	r2, [pc, #64]	; (8003270 <TIM_OC4_SetConfig+0x9c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d109      	bne.n	8003248 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800323a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	019b      	lsls	r3, r3, #6
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685a      	ldr	r2, [r3, #4]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	621a      	str	r2, [r3, #32]
}
 8003262:	bf00      	nop
 8003264:	371c      	adds	r7, #28
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
 800326e:	bf00      	nop
 8003270:	40010000 	.word	0x40010000

08003274 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003274:	b480      	push	{r7}
 8003276:	b087      	sub	sp, #28
 8003278:	af00      	add	r7, sp, #0
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	60b9      	str	r1, [r7, #8]
 800327e:	607a      	str	r2, [r7, #4]
 8003280:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	f023 0201 	bic.w	r2, r3, #1
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4a24      	ldr	r2, [pc, #144]	; (8003330 <TIM_TI1_SetConfig+0xbc>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <TIM_TI1_SetConfig+0x56>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a8:	d00f      	beq.n	80032ca <TIM_TI1_SetConfig+0x56>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4a21      	ldr	r2, [pc, #132]	; (8003334 <TIM_TI1_SetConfig+0xc0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00b      	beq.n	80032ca <TIM_TI1_SetConfig+0x56>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4a20      	ldr	r2, [pc, #128]	; (8003338 <TIM_TI1_SetConfig+0xc4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d007      	beq.n	80032ca <TIM_TI1_SetConfig+0x56>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4a1f      	ldr	r2, [pc, #124]	; (800333c <TIM_TI1_SetConfig+0xc8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d003      	beq.n	80032ca <TIM_TI1_SetConfig+0x56>
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4a1e      	ldr	r2, [pc, #120]	; (8003340 <TIM_TI1_SetConfig+0xcc>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d101      	bne.n	80032ce <TIM_TI1_SetConfig+0x5a>
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <TIM_TI1_SetConfig+0x5c>
 80032ce:	2300      	movs	r3, #0
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d008      	beq.n	80032e6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	f023 0303 	bic.w	r3, r3, #3
 80032da:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	e003      	b.n	80032ee <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f043 0301 	orr.w	r3, r3, #1
 80032ec:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	011b      	lsls	r3, r3, #4
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f023 030a 	bic.w	r3, r3, #10
 8003308:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f003 030a 	and.w	r3, r3, #10
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4313      	orrs	r3, r2
 8003314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	40010000 	.word	0x40010000
 8003334:	40000400 	.word	0x40000400
 8003338:	40000800 	.word	0x40000800
 800333c:	40000c00 	.word	0x40000c00
 8003340:	40014000 	.word	0x40014000

08003344 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003344:	b480      	push	{r7}
 8003346:	b087      	sub	sp, #28
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a1b      	ldr	r3, [r3, #32]
 8003356:	f023 0210 	bic.w	r2, r3, #16
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003370:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	021b      	lsls	r3, r3, #8
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003382:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	031b      	lsls	r3, r3, #12
 8003388:	b29b      	uxth	r3, r3
 800338a:	697a      	ldr	r2, [r7, #20]
 800338c:	4313      	orrs	r3, r2
 800338e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003396:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	621a      	str	r2, [r3, #32]
}
 80033b2:	bf00      	nop
 80033b4:	371c      	adds	r7, #28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80033be:	b480      	push	{r7}
 80033c0:	b087      	sub	sp, #28
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	60f8      	str	r0, [r7, #12]
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a1b      	ldr	r3, [r3, #32]
 80033d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a1b      	ldr	r3, [r3, #32]
 80033e2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f023 0303 	bic.w	r3, r3, #3
 80033ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80033fa:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	b2db      	uxtb	r3, r3
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	4313      	orrs	r3, r2
 8003406:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800340e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	4313      	orrs	r3, r2
 800341c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	697a      	ldr	r2, [r7, #20]
 8003422:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	693a      	ldr	r2, [r7, #16]
 8003428:	621a      	str	r2, [r3, #32]
}
 800342a:	bf00      	nop
 800342c:	371c      	adds	r7, #28
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003436:	b480      	push	{r7}
 8003438:	b087      	sub	sp, #28
 800343a:	af00      	add	r7, sp, #0
 800343c:	60f8      	str	r0, [r7, #12]
 800343e:	60b9      	str	r1, [r7, #8]
 8003440:	607a      	str	r2, [r7, #4]
 8003442:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a1b      	ldr	r3, [r3, #32]
 8003448:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	69db      	ldr	r3, [r3, #28]
 8003454:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003462:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003474:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	031b      	lsls	r3, r3, #12
 800347a:	b29b      	uxth	r3, r3
 800347c:	697a      	ldr	r2, [r7, #20]
 800347e:	4313      	orrs	r3, r2
 8003480:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003488:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	031b      	lsls	r3, r3, #12
 800348e:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003492:	693a      	ldr	r2, [r7, #16]
 8003494:	4313      	orrs	r3, r2
 8003496:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	693a      	ldr	r2, [r7, #16]
 80034a2:	621a      	str	r2, [r3, #32]
}
 80034a4:	bf00      	nop
 80034a6:	371c      	adds	r7, #28
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b087      	sub	sp, #28
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	60f8      	str	r0, [r7, #12]
 80034b8:	60b9      	str	r1, [r7, #8]
 80034ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	2201      	movs	r2, #1
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a1a      	ldr	r2, [r3, #32]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	43db      	mvns	r3, r3
 80034d2:	401a      	ands	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	6a1a      	ldr	r2, [r3, #32]
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	f003 031f 	and.w	r3, r3, #31
 80034e2:	6879      	ldr	r1, [r7, #4]
 80034e4:	fa01 f303 	lsl.w	r3, r1, r3
 80034e8:	431a      	orrs	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	621a      	str	r2, [r3, #32]
}
 80034ee:	bf00      	nop
 80034f0:	371c      	adds	r7, #28
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
	...

080034fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003510:	2302      	movs	r3, #2
 8003512:	e050      	b.n	80035b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2202      	movs	r2, #2
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800353a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68fa      	ldr	r2, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68fa      	ldr	r2, [r7, #12]
 800354c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1c      	ldr	r2, [pc, #112]	; (80035c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d018      	beq.n	800358a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003560:	d013      	beq.n	800358a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a18      	ldr	r2, [pc, #96]	; (80035c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d00e      	beq.n	800358a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a16      	ldr	r2, [pc, #88]	; (80035cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d009      	beq.n	800358a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a15      	ldr	r2, [pc, #84]	; (80035d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d004      	beq.n	800358a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a13      	ldr	r2, [pc, #76]	; (80035d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d10c      	bne.n	80035a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003590:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	4313      	orrs	r3, r2
 800359a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40010000 	.word	0x40010000
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40000800 	.word	0x40000800
 80035d0:	40000c00 	.word	0x40000c00
 80035d4:	40014000 	.word	0x40014000

080035d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80035e0:	bf00      	nop
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <__errno>:
 8003600:	4b01      	ldr	r3, [pc, #4]	; (8003608 <__errno+0x8>)
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	2000000c 	.word	0x2000000c

0800360c <__libc_init_array>:
 800360c:	b570      	push	{r4, r5, r6, lr}
 800360e:	4e0d      	ldr	r6, [pc, #52]	; (8003644 <__libc_init_array+0x38>)
 8003610:	4c0d      	ldr	r4, [pc, #52]	; (8003648 <__libc_init_array+0x3c>)
 8003612:	1ba4      	subs	r4, r4, r6
 8003614:	10a4      	asrs	r4, r4, #2
 8003616:	2500      	movs	r5, #0
 8003618:	42a5      	cmp	r5, r4
 800361a:	d109      	bne.n	8003630 <__libc_init_array+0x24>
 800361c:	4e0b      	ldr	r6, [pc, #44]	; (800364c <__libc_init_array+0x40>)
 800361e:	4c0c      	ldr	r4, [pc, #48]	; (8003650 <__libc_init_array+0x44>)
 8003620:	f000 fc26 	bl	8003e70 <_init>
 8003624:	1ba4      	subs	r4, r4, r6
 8003626:	10a4      	asrs	r4, r4, #2
 8003628:	2500      	movs	r5, #0
 800362a:	42a5      	cmp	r5, r4
 800362c:	d105      	bne.n	800363a <__libc_init_array+0x2e>
 800362e:	bd70      	pop	{r4, r5, r6, pc}
 8003630:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003634:	4798      	blx	r3
 8003636:	3501      	adds	r5, #1
 8003638:	e7ee      	b.n	8003618 <__libc_init_array+0xc>
 800363a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800363e:	4798      	blx	r3
 8003640:	3501      	adds	r5, #1
 8003642:	e7f2      	b.n	800362a <__libc_init_array+0x1e>
 8003644:	08003f04 	.word	0x08003f04
 8003648:	08003f04 	.word	0x08003f04
 800364c:	08003f04 	.word	0x08003f04
 8003650:	08003f08 	.word	0x08003f08

08003654 <memset>:
 8003654:	4402      	add	r2, r0
 8003656:	4603      	mov	r3, r0
 8003658:	4293      	cmp	r3, r2
 800365a:	d100      	bne.n	800365e <memset+0xa>
 800365c:	4770      	bx	lr
 800365e:	f803 1b01 	strb.w	r1, [r3], #1
 8003662:	e7f9      	b.n	8003658 <memset+0x4>

08003664 <siprintf>:
 8003664:	b40e      	push	{r1, r2, r3}
 8003666:	b500      	push	{lr}
 8003668:	b09c      	sub	sp, #112	; 0x70
 800366a:	ab1d      	add	r3, sp, #116	; 0x74
 800366c:	9002      	str	r0, [sp, #8]
 800366e:	9006      	str	r0, [sp, #24]
 8003670:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003674:	4809      	ldr	r0, [pc, #36]	; (800369c <siprintf+0x38>)
 8003676:	9107      	str	r1, [sp, #28]
 8003678:	9104      	str	r1, [sp, #16]
 800367a:	4909      	ldr	r1, [pc, #36]	; (80036a0 <siprintf+0x3c>)
 800367c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003680:	9105      	str	r1, [sp, #20]
 8003682:	6800      	ldr	r0, [r0, #0]
 8003684:	9301      	str	r3, [sp, #4]
 8003686:	a902      	add	r1, sp, #8
 8003688:	f000 f866 	bl	8003758 <_svfiprintf_r>
 800368c:	9b02      	ldr	r3, [sp, #8]
 800368e:	2200      	movs	r2, #0
 8003690:	701a      	strb	r2, [r3, #0]
 8003692:	b01c      	add	sp, #112	; 0x70
 8003694:	f85d eb04 	ldr.w	lr, [sp], #4
 8003698:	b003      	add	sp, #12
 800369a:	4770      	bx	lr
 800369c:	2000000c 	.word	0x2000000c
 80036a0:	ffff0208 	.word	0xffff0208

080036a4 <__ssputs_r>:
 80036a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036a8:	688e      	ldr	r6, [r1, #8]
 80036aa:	429e      	cmp	r6, r3
 80036ac:	4682      	mov	sl, r0
 80036ae:	460c      	mov	r4, r1
 80036b0:	4690      	mov	r8, r2
 80036b2:	4699      	mov	r9, r3
 80036b4:	d837      	bhi.n	8003726 <__ssputs_r+0x82>
 80036b6:	898a      	ldrh	r2, [r1, #12]
 80036b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80036bc:	d031      	beq.n	8003722 <__ssputs_r+0x7e>
 80036be:	6825      	ldr	r5, [r4, #0]
 80036c0:	6909      	ldr	r1, [r1, #16]
 80036c2:	1a6f      	subs	r7, r5, r1
 80036c4:	6965      	ldr	r5, [r4, #20]
 80036c6:	2302      	movs	r3, #2
 80036c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80036cc:	fb95 f5f3 	sdiv	r5, r5, r3
 80036d0:	f109 0301 	add.w	r3, r9, #1
 80036d4:	443b      	add	r3, r7
 80036d6:	429d      	cmp	r5, r3
 80036d8:	bf38      	it	cc
 80036da:	461d      	movcc	r5, r3
 80036dc:	0553      	lsls	r3, r2, #21
 80036de:	d530      	bpl.n	8003742 <__ssputs_r+0x9e>
 80036e0:	4629      	mov	r1, r5
 80036e2:	f000 fb2b 	bl	8003d3c <_malloc_r>
 80036e6:	4606      	mov	r6, r0
 80036e8:	b950      	cbnz	r0, 8003700 <__ssputs_r+0x5c>
 80036ea:	230c      	movs	r3, #12
 80036ec:	f8ca 3000 	str.w	r3, [sl]
 80036f0:	89a3      	ldrh	r3, [r4, #12]
 80036f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036f6:	81a3      	strh	r3, [r4, #12]
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295
 80036fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003700:	463a      	mov	r2, r7
 8003702:	6921      	ldr	r1, [r4, #16]
 8003704:	f000 faa8 	bl	8003c58 <memcpy>
 8003708:	89a3      	ldrh	r3, [r4, #12]
 800370a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800370e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003712:	81a3      	strh	r3, [r4, #12]
 8003714:	6126      	str	r6, [r4, #16]
 8003716:	6165      	str	r5, [r4, #20]
 8003718:	443e      	add	r6, r7
 800371a:	1bed      	subs	r5, r5, r7
 800371c:	6026      	str	r6, [r4, #0]
 800371e:	60a5      	str	r5, [r4, #8]
 8003720:	464e      	mov	r6, r9
 8003722:	454e      	cmp	r6, r9
 8003724:	d900      	bls.n	8003728 <__ssputs_r+0x84>
 8003726:	464e      	mov	r6, r9
 8003728:	4632      	mov	r2, r6
 800372a:	4641      	mov	r1, r8
 800372c:	6820      	ldr	r0, [r4, #0]
 800372e:	f000 fa9e 	bl	8003c6e <memmove>
 8003732:	68a3      	ldr	r3, [r4, #8]
 8003734:	1b9b      	subs	r3, r3, r6
 8003736:	60a3      	str	r3, [r4, #8]
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	441e      	add	r6, r3
 800373c:	6026      	str	r6, [r4, #0]
 800373e:	2000      	movs	r0, #0
 8003740:	e7dc      	b.n	80036fc <__ssputs_r+0x58>
 8003742:	462a      	mov	r2, r5
 8003744:	f000 fb54 	bl	8003df0 <_realloc_r>
 8003748:	4606      	mov	r6, r0
 800374a:	2800      	cmp	r0, #0
 800374c:	d1e2      	bne.n	8003714 <__ssputs_r+0x70>
 800374e:	6921      	ldr	r1, [r4, #16]
 8003750:	4650      	mov	r0, sl
 8003752:	f000 faa5 	bl	8003ca0 <_free_r>
 8003756:	e7c8      	b.n	80036ea <__ssputs_r+0x46>

08003758 <_svfiprintf_r>:
 8003758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800375c:	461d      	mov	r5, r3
 800375e:	898b      	ldrh	r3, [r1, #12]
 8003760:	061f      	lsls	r7, r3, #24
 8003762:	b09d      	sub	sp, #116	; 0x74
 8003764:	4680      	mov	r8, r0
 8003766:	460c      	mov	r4, r1
 8003768:	4616      	mov	r6, r2
 800376a:	d50f      	bpl.n	800378c <_svfiprintf_r+0x34>
 800376c:	690b      	ldr	r3, [r1, #16]
 800376e:	b96b      	cbnz	r3, 800378c <_svfiprintf_r+0x34>
 8003770:	2140      	movs	r1, #64	; 0x40
 8003772:	f000 fae3 	bl	8003d3c <_malloc_r>
 8003776:	6020      	str	r0, [r4, #0]
 8003778:	6120      	str	r0, [r4, #16]
 800377a:	b928      	cbnz	r0, 8003788 <_svfiprintf_r+0x30>
 800377c:	230c      	movs	r3, #12
 800377e:	f8c8 3000 	str.w	r3, [r8]
 8003782:	f04f 30ff 	mov.w	r0, #4294967295
 8003786:	e0c8      	b.n	800391a <_svfiprintf_r+0x1c2>
 8003788:	2340      	movs	r3, #64	; 0x40
 800378a:	6163      	str	r3, [r4, #20]
 800378c:	2300      	movs	r3, #0
 800378e:	9309      	str	r3, [sp, #36]	; 0x24
 8003790:	2320      	movs	r3, #32
 8003792:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003796:	2330      	movs	r3, #48	; 0x30
 8003798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800379c:	9503      	str	r5, [sp, #12]
 800379e:	f04f 0b01 	mov.w	fp, #1
 80037a2:	4637      	mov	r7, r6
 80037a4:	463d      	mov	r5, r7
 80037a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80037aa:	b10b      	cbz	r3, 80037b0 <_svfiprintf_r+0x58>
 80037ac:	2b25      	cmp	r3, #37	; 0x25
 80037ae:	d13e      	bne.n	800382e <_svfiprintf_r+0xd6>
 80037b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80037b4:	d00b      	beq.n	80037ce <_svfiprintf_r+0x76>
 80037b6:	4653      	mov	r3, sl
 80037b8:	4632      	mov	r2, r6
 80037ba:	4621      	mov	r1, r4
 80037bc:	4640      	mov	r0, r8
 80037be:	f7ff ff71 	bl	80036a4 <__ssputs_r>
 80037c2:	3001      	adds	r0, #1
 80037c4:	f000 80a4 	beq.w	8003910 <_svfiprintf_r+0x1b8>
 80037c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037ca:	4453      	add	r3, sl
 80037cc:	9309      	str	r3, [sp, #36]	; 0x24
 80037ce:	783b      	ldrb	r3, [r7, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	f000 809d 	beq.w	8003910 <_svfiprintf_r+0x1b8>
 80037d6:	2300      	movs	r3, #0
 80037d8:	f04f 32ff 	mov.w	r2, #4294967295
 80037dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037e0:	9304      	str	r3, [sp, #16]
 80037e2:	9307      	str	r3, [sp, #28]
 80037e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037e8:	931a      	str	r3, [sp, #104]	; 0x68
 80037ea:	462f      	mov	r7, r5
 80037ec:	2205      	movs	r2, #5
 80037ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80037f2:	4850      	ldr	r0, [pc, #320]	; (8003934 <_svfiprintf_r+0x1dc>)
 80037f4:	f7fc fcf4 	bl	80001e0 <memchr>
 80037f8:	9b04      	ldr	r3, [sp, #16]
 80037fa:	b9d0      	cbnz	r0, 8003832 <_svfiprintf_r+0xda>
 80037fc:	06d9      	lsls	r1, r3, #27
 80037fe:	bf44      	itt	mi
 8003800:	2220      	movmi	r2, #32
 8003802:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003806:	071a      	lsls	r2, r3, #28
 8003808:	bf44      	itt	mi
 800380a:	222b      	movmi	r2, #43	; 0x2b
 800380c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003810:	782a      	ldrb	r2, [r5, #0]
 8003812:	2a2a      	cmp	r2, #42	; 0x2a
 8003814:	d015      	beq.n	8003842 <_svfiprintf_r+0xea>
 8003816:	9a07      	ldr	r2, [sp, #28]
 8003818:	462f      	mov	r7, r5
 800381a:	2000      	movs	r0, #0
 800381c:	250a      	movs	r5, #10
 800381e:	4639      	mov	r1, r7
 8003820:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003824:	3b30      	subs	r3, #48	; 0x30
 8003826:	2b09      	cmp	r3, #9
 8003828:	d94d      	bls.n	80038c6 <_svfiprintf_r+0x16e>
 800382a:	b1b8      	cbz	r0, 800385c <_svfiprintf_r+0x104>
 800382c:	e00f      	b.n	800384e <_svfiprintf_r+0xf6>
 800382e:	462f      	mov	r7, r5
 8003830:	e7b8      	b.n	80037a4 <_svfiprintf_r+0x4c>
 8003832:	4a40      	ldr	r2, [pc, #256]	; (8003934 <_svfiprintf_r+0x1dc>)
 8003834:	1a80      	subs	r0, r0, r2
 8003836:	fa0b f000 	lsl.w	r0, fp, r0
 800383a:	4318      	orrs	r0, r3
 800383c:	9004      	str	r0, [sp, #16]
 800383e:	463d      	mov	r5, r7
 8003840:	e7d3      	b.n	80037ea <_svfiprintf_r+0x92>
 8003842:	9a03      	ldr	r2, [sp, #12]
 8003844:	1d11      	adds	r1, r2, #4
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	9103      	str	r1, [sp, #12]
 800384a:	2a00      	cmp	r2, #0
 800384c:	db01      	blt.n	8003852 <_svfiprintf_r+0xfa>
 800384e:	9207      	str	r2, [sp, #28]
 8003850:	e004      	b.n	800385c <_svfiprintf_r+0x104>
 8003852:	4252      	negs	r2, r2
 8003854:	f043 0302 	orr.w	r3, r3, #2
 8003858:	9207      	str	r2, [sp, #28]
 800385a:	9304      	str	r3, [sp, #16]
 800385c:	783b      	ldrb	r3, [r7, #0]
 800385e:	2b2e      	cmp	r3, #46	; 0x2e
 8003860:	d10c      	bne.n	800387c <_svfiprintf_r+0x124>
 8003862:	787b      	ldrb	r3, [r7, #1]
 8003864:	2b2a      	cmp	r3, #42	; 0x2a
 8003866:	d133      	bne.n	80038d0 <_svfiprintf_r+0x178>
 8003868:	9b03      	ldr	r3, [sp, #12]
 800386a:	1d1a      	adds	r2, r3, #4
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	9203      	str	r2, [sp, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	bfb8      	it	lt
 8003874:	f04f 33ff 	movlt.w	r3, #4294967295
 8003878:	3702      	adds	r7, #2
 800387a:	9305      	str	r3, [sp, #20]
 800387c:	4d2e      	ldr	r5, [pc, #184]	; (8003938 <_svfiprintf_r+0x1e0>)
 800387e:	7839      	ldrb	r1, [r7, #0]
 8003880:	2203      	movs	r2, #3
 8003882:	4628      	mov	r0, r5
 8003884:	f7fc fcac 	bl	80001e0 <memchr>
 8003888:	b138      	cbz	r0, 800389a <_svfiprintf_r+0x142>
 800388a:	2340      	movs	r3, #64	; 0x40
 800388c:	1b40      	subs	r0, r0, r5
 800388e:	fa03 f000 	lsl.w	r0, r3, r0
 8003892:	9b04      	ldr	r3, [sp, #16]
 8003894:	4303      	orrs	r3, r0
 8003896:	3701      	adds	r7, #1
 8003898:	9304      	str	r3, [sp, #16]
 800389a:	7839      	ldrb	r1, [r7, #0]
 800389c:	4827      	ldr	r0, [pc, #156]	; (800393c <_svfiprintf_r+0x1e4>)
 800389e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038a2:	2206      	movs	r2, #6
 80038a4:	1c7e      	adds	r6, r7, #1
 80038a6:	f7fc fc9b 	bl	80001e0 <memchr>
 80038aa:	2800      	cmp	r0, #0
 80038ac:	d038      	beq.n	8003920 <_svfiprintf_r+0x1c8>
 80038ae:	4b24      	ldr	r3, [pc, #144]	; (8003940 <_svfiprintf_r+0x1e8>)
 80038b0:	bb13      	cbnz	r3, 80038f8 <_svfiprintf_r+0x1a0>
 80038b2:	9b03      	ldr	r3, [sp, #12]
 80038b4:	3307      	adds	r3, #7
 80038b6:	f023 0307 	bic.w	r3, r3, #7
 80038ba:	3308      	adds	r3, #8
 80038bc:	9303      	str	r3, [sp, #12]
 80038be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038c0:	444b      	add	r3, r9
 80038c2:	9309      	str	r3, [sp, #36]	; 0x24
 80038c4:	e76d      	b.n	80037a2 <_svfiprintf_r+0x4a>
 80038c6:	fb05 3202 	mla	r2, r5, r2, r3
 80038ca:	2001      	movs	r0, #1
 80038cc:	460f      	mov	r7, r1
 80038ce:	e7a6      	b.n	800381e <_svfiprintf_r+0xc6>
 80038d0:	2300      	movs	r3, #0
 80038d2:	3701      	adds	r7, #1
 80038d4:	9305      	str	r3, [sp, #20]
 80038d6:	4619      	mov	r1, r3
 80038d8:	250a      	movs	r5, #10
 80038da:	4638      	mov	r0, r7
 80038dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038e0:	3a30      	subs	r2, #48	; 0x30
 80038e2:	2a09      	cmp	r2, #9
 80038e4:	d903      	bls.n	80038ee <_svfiprintf_r+0x196>
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0c8      	beq.n	800387c <_svfiprintf_r+0x124>
 80038ea:	9105      	str	r1, [sp, #20]
 80038ec:	e7c6      	b.n	800387c <_svfiprintf_r+0x124>
 80038ee:	fb05 2101 	mla	r1, r5, r1, r2
 80038f2:	2301      	movs	r3, #1
 80038f4:	4607      	mov	r7, r0
 80038f6:	e7f0      	b.n	80038da <_svfiprintf_r+0x182>
 80038f8:	ab03      	add	r3, sp, #12
 80038fa:	9300      	str	r3, [sp, #0]
 80038fc:	4622      	mov	r2, r4
 80038fe:	4b11      	ldr	r3, [pc, #68]	; (8003944 <_svfiprintf_r+0x1ec>)
 8003900:	a904      	add	r1, sp, #16
 8003902:	4640      	mov	r0, r8
 8003904:	f3af 8000 	nop.w
 8003908:	f1b0 3fff 	cmp.w	r0, #4294967295
 800390c:	4681      	mov	r9, r0
 800390e:	d1d6      	bne.n	80038be <_svfiprintf_r+0x166>
 8003910:	89a3      	ldrh	r3, [r4, #12]
 8003912:	065b      	lsls	r3, r3, #25
 8003914:	f53f af35 	bmi.w	8003782 <_svfiprintf_r+0x2a>
 8003918:	9809      	ldr	r0, [sp, #36]	; 0x24
 800391a:	b01d      	add	sp, #116	; 0x74
 800391c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003920:	ab03      	add	r3, sp, #12
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	4622      	mov	r2, r4
 8003926:	4b07      	ldr	r3, [pc, #28]	; (8003944 <_svfiprintf_r+0x1ec>)
 8003928:	a904      	add	r1, sp, #16
 800392a:	4640      	mov	r0, r8
 800392c:	f000 f882 	bl	8003a34 <_printf_i>
 8003930:	e7ea      	b.n	8003908 <_svfiprintf_r+0x1b0>
 8003932:	bf00      	nop
 8003934:	08003ec8 	.word	0x08003ec8
 8003938:	08003ece 	.word	0x08003ece
 800393c:	08003ed2 	.word	0x08003ed2
 8003940:	00000000 	.word	0x00000000
 8003944:	080036a5 	.word	0x080036a5

08003948 <_printf_common>:
 8003948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800394c:	4691      	mov	r9, r2
 800394e:	461f      	mov	r7, r3
 8003950:	688a      	ldr	r2, [r1, #8]
 8003952:	690b      	ldr	r3, [r1, #16]
 8003954:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003958:	4293      	cmp	r3, r2
 800395a:	bfb8      	it	lt
 800395c:	4613      	movlt	r3, r2
 800395e:	f8c9 3000 	str.w	r3, [r9]
 8003962:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003966:	4606      	mov	r6, r0
 8003968:	460c      	mov	r4, r1
 800396a:	b112      	cbz	r2, 8003972 <_printf_common+0x2a>
 800396c:	3301      	adds	r3, #1
 800396e:	f8c9 3000 	str.w	r3, [r9]
 8003972:	6823      	ldr	r3, [r4, #0]
 8003974:	0699      	lsls	r1, r3, #26
 8003976:	bf42      	ittt	mi
 8003978:	f8d9 3000 	ldrmi.w	r3, [r9]
 800397c:	3302      	addmi	r3, #2
 800397e:	f8c9 3000 	strmi.w	r3, [r9]
 8003982:	6825      	ldr	r5, [r4, #0]
 8003984:	f015 0506 	ands.w	r5, r5, #6
 8003988:	d107      	bne.n	800399a <_printf_common+0x52>
 800398a:	f104 0a19 	add.w	sl, r4, #25
 800398e:	68e3      	ldr	r3, [r4, #12]
 8003990:	f8d9 2000 	ldr.w	r2, [r9]
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	42ab      	cmp	r3, r5
 8003998:	dc28      	bgt.n	80039ec <_printf_common+0xa4>
 800399a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800399e:	6822      	ldr	r2, [r4, #0]
 80039a0:	3300      	adds	r3, #0
 80039a2:	bf18      	it	ne
 80039a4:	2301      	movne	r3, #1
 80039a6:	0692      	lsls	r2, r2, #26
 80039a8:	d42d      	bmi.n	8003a06 <_printf_common+0xbe>
 80039aa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039ae:	4639      	mov	r1, r7
 80039b0:	4630      	mov	r0, r6
 80039b2:	47c0      	blx	r8
 80039b4:	3001      	adds	r0, #1
 80039b6:	d020      	beq.n	80039fa <_printf_common+0xb2>
 80039b8:	6823      	ldr	r3, [r4, #0]
 80039ba:	68e5      	ldr	r5, [r4, #12]
 80039bc:	f8d9 2000 	ldr.w	r2, [r9]
 80039c0:	f003 0306 	and.w	r3, r3, #6
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	bf08      	it	eq
 80039c8:	1aad      	subeq	r5, r5, r2
 80039ca:	68a3      	ldr	r3, [r4, #8]
 80039cc:	6922      	ldr	r2, [r4, #16]
 80039ce:	bf0c      	ite	eq
 80039d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039d4:	2500      	movne	r5, #0
 80039d6:	4293      	cmp	r3, r2
 80039d8:	bfc4      	itt	gt
 80039da:	1a9b      	subgt	r3, r3, r2
 80039dc:	18ed      	addgt	r5, r5, r3
 80039de:	f04f 0900 	mov.w	r9, #0
 80039e2:	341a      	adds	r4, #26
 80039e4:	454d      	cmp	r5, r9
 80039e6:	d11a      	bne.n	8003a1e <_printf_common+0xd6>
 80039e8:	2000      	movs	r0, #0
 80039ea:	e008      	b.n	80039fe <_printf_common+0xb6>
 80039ec:	2301      	movs	r3, #1
 80039ee:	4652      	mov	r2, sl
 80039f0:	4639      	mov	r1, r7
 80039f2:	4630      	mov	r0, r6
 80039f4:	47c0      	blx	r8
 80039f6:	3001      	adds	r0, #1
 80039f8:	d103      	bne.n	8003a02 <_printf_common+0xba>
 80039fa:	f04f 30ff 	mov.w	r0, #4294967295
 80039fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a02:	3501      	adds	r5, #1
 8003a04:	e7c3      	b.n	800398e <_printf_common+0x46>
 8003a06:	18e1      	adds	r1, r4, r3
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	2030      	movs	r0, #48	; 0x30
 8003a0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a10:	4422      	add	r2, r4
 8003a12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a1a:	3302      	adds	r3, #2
 8003a1c:	e7c5      	b.n	80039aa <_printf_common+0x62>
 8003a1e:	2301      	movs	r3, #1
 8003a20:	4622      	mov	r2, r4
 8003a22:	4639      	mov	r1, r7
 8003a24:	4630      	mov	r0, r6
 8003a26:	47c0      	blx	r8
 8003a28:	3001      	adds	r0, #1
 8003a2a:	d0e6      	beq.n	80039fa <_printf_common+0xb2>
 8003a2c:	f109 0901 	add.w	r9, r9, #1
 8003a30:	e7d8      	b.n	80039e4 <_printf_common+0x9c>
	...

08003a34 <_printf_i>:
 8003a34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003a38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003a3c:	460c      	mov	r4, r1
 8003a3e:	7e09      	ldrb	r1, [r1, #24]
 8003a40:	b085      	sub	sp, #20
 8003a42:	296e      	cmp	r1, #110	; 0x6e
 8003a44:	4617      	mov	r7, r2
 8003a46:	4606      	mov	r6, r0
 8003a48:	4698      	mov	r8, r3
 8003a4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003a4c:	f000 80b3 	beq.w	8003bb6 <_printf_i+0x182>
 8003a50:	d822      	bhi.n	8003a98 <_printf_i+0x64>
 8003a52:	2963      	cmp	r1, #99	; 0x63
 8003a54:	d036      	beq.n	8003ac4 <_printf_i+0x90>
 8003a56:	d80a      	bhi.n	8003a6e <_printf_i+0x3a>
 8003a58:	2900      	cmp	r1, #0
 8003a5a:	f000 80b9 	beq.w	8003bd0 <_printf_i+0x19c>
 8003a5e:	2958      	cmp	r1, #88	; 0x58
 8003a60:	f000 8083 	beq.w	8003b6a <_printf_i+0x136>
 8003a64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003a6c:	e032      	b.n	8003ad4 <_printf_i+0xa0>
 8003a6e:	2964      	cmp	r1, #100	; 0x64
 8003a70:	d001      	beq.n	8003a76 <_printf_i+0x42>
 8003a72:	2969      	cmp	r1, #105	; 0x69
 8003a74:	d1f6      	bne.n	8003a64 <_printf_i+0x30>
 8003a76:	6820      	ldr	r0, [r4, #0]
 8003a78:	6813      	ldr	r3, [r2, #0]
 8003a7a:	0605      	lsls	r5, r0, #24
 8003a7c:	f103 0104 	add.w	r1, r3, #4
 8003a80:	d52a      	bpl.n	8003ad8 <_printf_i+0xa4>
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6011      	str	r1, [r2, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	da03      	bge.n	8003a92 <_printf_i+0x5e>
 8003a8a:	222d      	movs	r2, #45	; 0x2d
 8003a8c:	425b      	negs	r3, r3
 8003a8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003a92:	486f      	ldr	r0, [pc, #444]	; (8003c50 <_printf_i+0x21c>)
 8003a94:	220a      	movs	r2, #10
 8003a96:	e039      	b.n	8003b0c <_printf_i+0xd8>
 8003a98:	2973      	cmp	r1, #115	; 0x73
 8003a9a:	f000 809d 	beq.w	8003bd8 <_printf_i+0x1a4>
 8003a9e:	d808      	bhi.n	8003ab2 <_printf_i+0x7e>
 8003aa0:	296f      	cmp	r1, #111	; 0x6f
 8003aa2:	d020      	beq.n	8003ae6 <_printf_i+0xb2>
 8003aa4:	2970      	cmp	r1, #112	; 0x70
 8003aa6:	d1dd      	bne.n	8003a64 <_printf_i+0x30>
 8003aa8:	6823      	ldr	r3, [r4, #0]
 8003aaa:	f043 0320 	orr.w	r3, r3, #32
 8003aae:	6023      	str	r3, [r4, #0]
 8003ab0:	e003      	b.n	8003aba <_printf_i+0x86>
 8003ab2:	2975      	cmp	r1, #117	; 0x75
 8003ab4:	d017      	beq.n	8003ae6 <_printf_i+0xb2>
 8003ab6:	2978      	cmp	r1, #120	; 0x78
 8003ab8:	d1d4      	bne.n	8003a64 <_printf_i+0x30>
 8003aba:	2378      	movs	r3, #120	; 0x78
 8003abc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ac0:	4864      	ldr	r0, [pc, #400]	; (8003c54 <_printf_i+0x220>)
 8003ac2:	e055      	b.n	8003b70 <_printf_i+0x13c>
 8003ac4:	6813      	ldr	r3, [r2, #0]
 8003ac6:	1d19      	adds	r1, r3, #4
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6011      	str	r1, [r2, #0]
 8003acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e08c      	b.n	8003bf2 <_printf_i+0x1be>
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6011      	str	r1, [r2, #0]
 8003adc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003ae0:	bf18      	it	ne
 8003ae2:	b21b      	sxthne	r3, r3
 8003ae4:	e7cf      	b.n	8003a86 <_printf_i+0x52>
 8003ae6:	6813      	ldr	r3, [r2, #0]
 8003ae8:	6825      	ldr	r5, [r4, #0]
 8003aea:	1d18      	adds	r0, r3, #4
 8003aec:	6010      	str	r0, [r2, #0]
 8003aee:	0628      	lsls	r0, r5, #24
 8003af0:	d501      	bpl.n	8003af6 <_printf_i+0xc2>
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	e002      	b.n	8003afc <_printf_i+0xc8>
 8003af6:	0668      	lsls	r0, r5, #25
 8003af8:	d5fb      	bpl.n	8003af2 <_printf_i+0xbe>
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	4854      	ldr	r0, [pc, #336]	; (8003c50 <_printf_i+0x21c>)
 8003afe:	296f      	cmp	r1, #111	; 0x6f
 8003b00:	bf14      	ite	ne
 8003b02:	220a      	movne	r2, #10
 8003b04:	2208      	moveq	r2, #8
 8003b06:	2100      	movs	r1, #0
 8003b08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b0c:	6865      	ldr	r5, [r4, #4]
 8003b0e:	60a5      	str	r5, [r4, #8]
 8003b10:	2d00      	cmp	r5, #0
 8003b12:	f2c0 8095 	blt.w	8003c40 <_printf_i+0x20c>
 8003b16:	6821      	ldr	r1, [r4, #0]
 8003b18:	f021 0104 	bic.w	r1, r1, #4
 8003b1c:	6021      	str	r1, [r4, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d13d      	bne.n	8003b9e <_printf_i+0x16a>
 8003b22:	2d00      	cmp	r5, #0
 8003b24:	f040 808e 	bne.w	8003c44 <_printf_i+0x210>
 8003b28:	4665      	mov	r5, ip
 8003b2a:	2a08      	cmp	r2, #8
 8003b2c:	d10b      	bne.n	8003b46 <_printf_i+0x112>
 8003b2e:	6823      	ldr	r3, [r4, #0]
 8003b30:	07db      	lsls	r3, r3, #31
 8003b32:	d508      	bpl.n	8003b46 <_printf_i+0x112>
 8003b34:	6923      	ldr	r3, [r4, #16]
 8003b36:	6862      	ldr	r2, [r4, #4]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	bfde      	ittt	le
 8003b3c:	2330      	movle	r3, #48	; 0x30
 8003b3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b46:	ebac 0305 	sub.w	r3, ip, r5
 8003b4a:	6123      	str	r3, [r4, #16]
 8003b4c:	f8cd 8000 	str.w	r8, [sp]
 8003b50:	463b      	mov	r3, r7
 8003b52:	aa03      	add	r2, sp, #12
 8003b54:	4621      	mov	r1, r4
 8003b56:	4630      	mov	r0, r6
 8003b58:	f7ff fef6 	bl	8003948 <_printf_common>
 8003b5c:	3001      	adds	r0, #1
 8003b5e:	d14d      	bne.n	8003bfc <_printf_i+0x1c8>
 8003b60:	f04f 30ff 	mov.w	r0, #4294967295
 8003b64:	b005      	add	sp, #20
 8003b66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003b6a:	4839      	ldr	r0, [pc, #228]	; (8003c50 <_printf_i+0x21c>)
 8003b6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003b70:	6813      	ldr	r3, [r2, #0]
 8003b72:	6821      	ldr	r1, [r4, #0]
 8003b74:	1d1d      	adds	r5, r3, #4
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6015      	str	r5, [r2, #0]
 8003b7a:	060a      	lsls	r2, r1, #24
 8003b7c:	d50b      	bpl.n	8003b96 <_printf_i+0x162>
 8003b7e:	07ca      	lsls	r2, r1, #31
 8003b80:	bf44      	itt	mi
 8003b82:	f041 0120 	orrmi.w	r1, r1, #32
 8003b86:	6021      	strmi	r1, [r4, #0]
 8003b88:	b91b      	cbnz	r3, 8003b92 <_printf_i+0x15e>
 8003b8a:	6822      	ldr	r2, [r4, #0]
 8003b8c:	f022 0220 	bic.w	r2, r2, #32
 8003b90:	6022      	str	r2, [r4, #0]
 8003b92:	2210      	movs	r2, #16
 8003b94:	e7b7      	b.n	8003b06 <_printf_i+0xd2>
 8003b96:	064d      	lsls	r5, r1, #25
 8003b98:	bf48      	it	mi
 8003b9a:	b29b      	uxthmi	r3, r3
 8003b9c:	e7ef      	b.n	8003b7e <_printf_i+0x14a>
 8003b9e:	4665      	mov	r5, ip
 8003ba0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ba4:	fb02 3311 	mls	r3, r2, r1, r3
 8003ba8:	5cc3      	ldrb	r3, [r0, r3]
 8003baa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003bae:	460b      	mov	r3, r1
 8003bb0:	2900      	cmp	r1, #0
 8003bb2:	d1f5      	bne.n	8003ba0 <_printf_i+0x16c>
 8003bb4:	e7b9      	b.n	8003b2a <_printf_i+0xf6>
 8003bb6:	6813      	ldr	r3, [r2, #0]
 8003bb8:	6825      	ldr	r5, [r4, #0]
 8003bba:	6961      	ldr	r1, [r4, #20]
 8003bbc:	1d18      	adds	r0, r3, #4
 8003bbe:	6010      	str	r0, [r2, #0]
 8003bc0:	0628      	lsls	r0, r5, #24
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	d501      	bpl.n	8003bca <_printf_i+0x196>
 8003bc6:	6019      	str	r1, [r3, #0]
 8003bc8:	e002      	b.n	8003bd0 <_printf_i+0x19c>
 8003bca:	066a      	lsls	r2, r5, #25
 8003bcc:	d5fb      	bpl.n	8003bc6 <_printf_i+0x192>
 8003bce:	8019      	strh	r1, [r3, #0]
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	6123      	str	r3, [r4, #16]
 8003bd4:	4665      	mov	r5, ip
 8003bd6:	e7b9      	b.n	8003b4c <_printf_i+0x118>
 8003bd8:	6813      	ldr	r3, [r2, #0]
 8003bda:	1d19      	adds	r1, r3, #4
 8003bdc:	6011      	str	r1, [r2, #0]
 8003bde:	681d      	ldr	r5, [r3, #0]
 8003be0:	6862      	ldr	r2, [r4, #4]
 8003be2:	2100      	movs	r1, #0
 8003be4:	4628      	mov	r0, r5
 8003be6:	f7fc fafb 	bl	80001e0 <memchr>
 8003bea:	b108      	cbz	r0, 8003bf0 <_printf_i+0x1bc>
 8003bec:	1b40      	subs	r0, r0, r5
 8003bee:	6060      	str	r0, [r4, #4]
 8003bf0:	6863      	ldr	r3, [r4, #4]
 8003bf2:	6123      	str	r3, [r4, #16]
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bfa:	e7a7      	b.n	8003b4c <_printf_i+0x118>
 8003bfc:	6923      	ldr	r3, [r4, #16]
 8003bfe:	462a      	mov	r2, r5
 8003c00:	4639      	mov	r1, r7
 8003c02:	4630      	mov	r0, r6
 8003c04:	47c0      	blx	r8
 8003c06:	3001      	adds	r0, #1
 8003c08:	d0aa      	beq.n	8003b60 <_printf_i+0x12c>
 8003c0a:	6823      	ldr	r3, [r4, #0]
 8003c0c:	079b      	lsls	r3, r3, #30
 8003c0e:	d413      	bmi.n	8003c38 <_printf_i+0x204>
 8003c10:	68e0      	ldr	r0, [r4, #12]
 8003c12:	9b03      	ldr	r3, [sp, #12]
 8003c14:	4298      	cmp	r0, r3
 8003c16:	bfb8      	it	lt
 8003c18:	4618      	movlt	r0, r3
 8003c1a:	e7a3      	b.n	8003b64 <_printf_i+0x130>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	464a      	mov	r2, r9
 8003c20:	4639      	mov	r1, r7
 8003c22:	4630      	mov	r0, r6
 8003c24:	47c0      	blx	r8
 8003c26:	3001      	adds	r0, #1
 8003c28:	d09a      	beq.n	8003b60 <_printf_i+0x12c>
 8003c2a:	3501      	adds	r5, #1
 8003c2c:	68e3      	ldr	r3, [r4, #12]
 8003c2e:	9a03      	ldr	r2, [sp, #12]
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	42ab      	cmp	r3, r5
 8003c34:	dcf2      	bgt.n	8003c1c <_printf_i+0x1e8>
 8003c36:	e7eb      	b.n	8003c10 <_printf_i+0x1dc>
 8003c38:	2500      	movs	r5, #0
 8003c3a:	f104 0919 	add.w	r9, r4, #25
 8003c3e:	e7f5      	b.n	8003c2c <_printf_i+0x1f8>
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d1ac      	bne.n	8003b9e <_printf_i+0x16a>
 8003c44:	7803      	ldrb	r3, [r0, #0]
 8003c46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c4e:	e76c      	b.n	8003b2a <_printf_i+0xf6>
 8003c50:	08003ed9 	.word	0x08003ed9
 8003c54:	08003eea 	.word	0x08003eea

08003c58 <memcpy>:
 8003c58:	b510      	push	{r4, lr}
 8003c5a:	1e43      	subs	r3, r0, #1
 8003c5c:	440a      	add	r2, r1
 8003c5e:	4291      	cmp	r1, r2
 8003c60:	d100      	bne.n	8003c64 <memcpy+0xc>
 8003c62:	bd10      	pop	{r4, pc}
 8003c64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c6c:	e7f7      	b.n	8003c5e <memcpy+0x6>

08003c6e <memmove>:
 8003c6e:	4288      	cmp	r0, r1
 8003c70:	b510      	push	{r4, lr}
 8003c72:	eb01 0302 	add.w	r3, r1, r2
 8003c76:	d807      	bhi.n	8003c88 <memmove+0x1a>
 8003c78:	1e42      	subs	r2, r0, #1
 8003c7a:	4299      	cmp	r1, r3
 8003c7c:	d00a      	beq.n	8003c94 <memmove+0x26>
 8003c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c82:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003c86:	e7f8      	b.n	8003c7a <memmove+0xc>
 8003c88:	4283      	cmp	r3, r0
 8003c8a:	d9f5      	bls.n	8003c78 <memmove+0xa>
 8003c8c:	1881      	adds	r1, r0, r2
 8003c8e:	1ad2      	subs	r2, r2, r3
 8003c90:	42d3      	cmn	r3, r2
 8003c92:	d100      	bne.n	8003c96 <memmove+0x28>
 8003c94:	bd10      	pop	{r4, pc}
 8003c96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c9a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003c9e:	e7f7      	b.n	8003c90 <memmove+0x22>

08003ca0 <_free_r>:
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	4605      	mov	r5, r0
 8003ca4:	2900      	cmp	r1, #0
 8003ca6:	d045      	beq.n	8003d34 <_free_r+0x94>
 8003ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cac:	1f0c      	subs	r4, r1, #4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	bfb8      	it	lt
 8003cb2:	18e4      	addlt	r4, r4, r3
 8003cb4:	f000 f8d2 	bl	8003e5c <__malloc_lock>
 8003cb8:	4a1f      	ldr	r2, [pc, #124]	; (8003d38 <_free_r+0x98>)
 8003cba:	6813      	ldr	r3, [r2, #0]
 8003cbc:	4610      	mov	r0, r2
 8003cbe:	b933      	cbnz	r3, 8003cce <_free_r+0x2e>
 8003cc0:	6063      	str	r3, [r4, #4]
 8003cc2:	6014      	str	r4, [r2, #0]
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003cca:	f000 b8c8 	b.w	8003e5e <__malloc_unlock>
 8003cce:	42a3      	cmp	r3, r4
 8003cd0:	d90c      	bls.n	8003cec <_free_r+0x4c>
 8003cd2:	6821      	ldr	r1, [r4, #0]
 8003cd4:	1862      	adds	r2, r4, r1
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	bf04      	itt	eq
 8003cda:	681a      	ldreq	r2, [r3, #0]
 8003cdc:	685b      	ldreq	r3, [r3, #4]
 8003cde:	6063      	str	r3, [r4, #4]
 8003ce0:	bf04      	itt	eq
 8003ce2:	1852      	addeq	r2, r2, r1
 8003ce4:	6022      	streq	r2, [r4, #0]
 8003ce6:	6004      	str	r4, [r0, #0]
 8003ce8:	e7ec      	b.n	8003cc4 <_free_r+0x24>
 8003cea:	4613      	mov	r3, r2
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	b10a      	cbz	r2, 8003cf4 <_free_r+0x54>
 8003cf0:	42a2      	cmp	r2, r4
 8003cf2:	d9fa      	bls.n	8003cea <_free_r+0x4a>
 8003cf4:	6819      	ldr	r1, [r3, #0]
 8003cf6:	1858      	adds	r0, r3, r1
 8003cf8:	42a0      	cmp	r0, r4
 8003cfa:	d10b      	bne.n	8003d14 <_free_r+0x74>
 8003cfc:	6820      	ldr	r0, [r4, #0]
 8003cfe:	4401      	add	r1, r0
 8003d00:	1858      	adds	r0, r3, r1
 8003d02:	4282      	cmp	r2, r0
 8003d04:	6019      	str	r1, [r3, #0]
 8003d06:	d1dd      	bne.n	8003cc4 <_free_r+0x24>
 8003d08:	6810      	ldr	r0, [r2, #0]
 8003d0a:	6852      	ldr	r2, [r2, #4]
 8003d0c:	605a      	str	r2, [r3, #4]
 8003d0e:	4401      	add	r1, r0
 8003d10:	6019      	str	r1, [r3, #0]
 8003d12:	e7d7      	b.n	8003cc4 <_free_r+0x24>
 8003d14:	d902      	bls.n	8003d1c <_free_r+0x7c>
 8003d16:	230c      	movs	r3, #12
 8003d18:	602b      	str	r3, [r5, #0]
 8003d1a:	e7d3      	b.n	8003cc4 <_free_r+0x24>
 8003d1c:	6820      	ldr	r0, [r4, #0]
 8003d1e:	1821      	adds	r1, r4, r0
 8003d20:	428a      	cmp	r2, r1
 8003d22:	bf04      	itt	eq
 8003d24:	6811      	ldreq	r1, [r2, #0]
 8003d26:	6852      	ldreq	r2, [r2, #4]
 8003d28:	6062      	str	r2, [r4, #4]
 8003d2a:	bf04      	itt	eq
 8003d2c:	1809      	addeq	r1, r1, r0
 8003d2e:	6021      	streq	r1, [r4, #0]
 8003d30:	605c      	str	r4, [r3, #4]
 8003d32:	e7c7      	b.n	8003cc4 <_free_r+0x24>
 8003d34:	bd38      	pop	{r3, r4, r5, pc}
 8003d36:	bf00      	nop
 8003d38:	200000a4 	.word	0x200000a4

08003d3c <_malloc_r>:
 8003d3c:	b570      	push	{r4, r5, r6, lr}
 8003d3e:	1ccd      	adds	r5, r1, #3
 8003d40:	f025 0503 	bic.w	r5, r5, #3
 8003d44:	3508      	adds	r5, #8
 8003d46:	2d0c      	cmp	r5, #12
 8003d48:	bf38      	it	cc
 8003d4a:	250c      	movcc	r5, #12
 8003d4c:	2d00      	cmp	r5, #0
 8003d4e:	4606      	mov	r6, r0
 8003d50:	db01      	blt.n	8003d56 <_malloc_r+0x1a>
 8003d52:	42a9      	cmp	r1, r5
 8003d54:	d903      	bls.n	8003d5e <_malloc_r+0x22>
 8003d56:	230c      	movs	r3, #12
 8003d58:	6033      	str	r3, [r6, #0]
 8003d5a:	2000      	movs	r0, #0
 8003d5c:	bd70      	pop	{r4, r5, r6, pc}
 8003d5e:	f000 f87d 	bl	8003e5c <__malloc_lock>
 8003d62:	4a21      	ldr	r2, [pc, #132]	; (8003de8 <_malloc_r+0xac>)
 8003d64:	6814      	ldr	r4, [r2, #0]
 8003d66:	4621      	mov	r1, r4
 8003d68:	b991      	cbnz	r1, 8003d90 <_malloc_r+0x54>
 8003d6a:	4c20      	ldr	r4, [pc, #128]	; (8003dec <_malloc_r+0xb0>)
 8003d6c:	6823      	ldr	r3, [r4, #0]
 8003d6e:	b91b      	cbnz	r3, 8003d78 <_malloc_r+0x3c>
 8003d70:	4630      	mov	r0, r6
 8003d72:	f000 f863 	bl	8003e3c <_sbrk_r>
 8003d76:	6020      	str	r0, [r4, #0]
 8003d78:	4629      	mov	r1, r5
 8003d7a:	4630      	mov	r0, r6
 8003d7c:	f000 f85e 	bl	8003e3c <_sbrk_r>
 8003d80:	1c43      	adds	r3, r0, #1
 8003d82:	d124      	bne.n	8003dce <_malloc_r+0x92>
 8003d84:	230c      	movs	r3, #12
 8003d86:	6033      	str	r3, [r6, #0]
 8003d88:	4630      	mov	r0, r6
 8003d8a:	f000 f868 	bl	8003e5e <__malloc_unlock>
 8003d8e:	e7e4      	b.n	8003d5a <_malloc_r+0x1e>
 8003d90:	680b      	ldr	r3, [r1, #0]
 8003d92:	1b5b      	subs	r3, r3, r5
 8003d94:	d418      	bmi.n	8003dc8 <_malloc_r+0x8c>
 8003d96:	2b0b      	cmp	r3, #11
 8003d98:	d90f      	bls.n	8003dba <_malloc_r+0x7e>
 8003d9a:	600b      	str	r3, [r1, #0]
 8003d9c:	50cd      	str	r5, [r1, r3]
 8003d9e:	18cc      	adds	r4, r1, r3
 8003da0:	4630      	mov	r0, r6
 8003da2:	f000 f85c 	bl	8003e5e <__malloc_unlock>
 8003da6:	f104 000b 	add.w	r0, r4, #11
 8003daa:	1d23      	adds	r3, r4, #4
 8003dac:	f020 0007 	bic.w	r0, r0, #7
 8003db0:	1ac3      	subs	r3, r0, r3
 8003db2:	d0d3      	beq.n	8003d5c <_malloc_r+0x20>
 8003db4:	425a      	negs	r2, r3
 8003db6:	50e2      	str	r2, [r4, r3]
 8003db8:	e7d0      	b.n	8003d5c <_malloc_r+0x20>
 8003dba:	428c      	cmp	r4, r1
 8003dbc:	684b      	ldr	r3, [r1, #4]
 8003dbe:	bf16      	itet	ne
 8003dc0:	6063      	strne	r3, [r4, #4]
 8003dc2:	6013      	streq	r3, [r2, #0]
 8003dc4:	460c      	movne	r4, r1
 8003dc6:	e7eb      	b.n	8003da0 <_malloc_r+0x64>
 8003dc8:	460c      	mov	r4, r1
 8003dca:	6849      	ldr	r1, [r1, #4]
 8003dcc:	e7cc      	b.n	8003d68 <_malloc_r+0x2c>
 8003dce:	1cc4      	adds	r4, r0, #3
 8003dd0:	f024 0403 	bic.w	r4, r4, #3
 8003dd4:	42a0      	cmp	r0, r4
 8003dd6:	d005      	beq.n	8003de4 <_malloc_r+0xa8>
 8003dd8:	1a21      	subs	r1, r4, r0
 8003dda:	4630      	mov	r0, r6
 8003ddc:	f000 f82e 	bl	8003e3c <_sbrk_r>
 8003de0:	3001      	adds	r0, #1
 8003de2:	d0cf      	beq.n	8003d84 <_malloc_r+0x48>
 8003de4:	6025      	str	r5, [r4, #0]
 8003de6:	e7db      	b.n	8003da0 <_malloc_r+0x64>
 8003de8:	200000a4 	.word	0x200000a4
 8003dec:	200000a8 	.word	0x200000a8

08003df0 <_realloc_r>:
 8003df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df2:	4607      	mov	r7, r0
 8003df4:	4614      	mov	r4, r2
 8003df6:	460e      	mov	r6, r1
 8003df8:	b921      	cbnz	r1, 8003e04 <_realloc_r+0x14>
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003e00:	f7ff bf9c 	b.w	8003d3c <_malloc_r>
 8003e04:	b922      	cbnz	r2, 8003e10 <_realloc_r+0x20>
 8003e06:	f7ff ff4b 	bl	8003ca0 <_free_r>
 8003e0a:	4625      	mov	r5, r4
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e10:	f000 f826 	bl	8003e60 <_malloc_usable_size_r>
 8003e14:	42a0      	cmp	r0, r4
 8003e16:	d20f      	bcs.n	8003e38 <_realloc_r+0x48>
 8003e18:	4621      	mov	r1, r4
 8003e1a:	4638      	mov	r0, r7
 8003e1c:	f7ff ff8e 	bl	8003d3c <_malloc_r>
 8003e20:	4605      	mov	r5, r0
 8003e22:	2800      	cmp	r0, #0
 8003e24:	d0f2      	beq.n	8003e0c <_realloc_r+0x1c>
 8003e26:	4631      	mov	r1, r6
 8003e28:	4622      	mov	r2, r4
 8003e2a:	f7ff ff15 	bl	8003c58 <memcpy>
 8003e2e:	4631      	mov	r1, r6
 8003e30:	4638      	mov	r0, r7
 8003e32:	f7ff ff35 	bl	8003ca0 <_free_r>
 8003e36:	e7e9      	b.n	8003e0c <_realloc_r+0x1c>
 8003e38:	4635      	mov	r5, r6
 8003e3a:	e7e7      	b.n	8003e0c <_realloc_r+0x1c>

08003e3c <_sbrk_r>:
 8003e3c:	b538      	push	{r3, r4, r5, lr}
 8003e3e:	4c06      	ldr	r4, [pc, #24]	; (8003e58 <_sbrk_r+0x1c>)
 8003e40:	2300      	movs	r3, #0
 8003e42:	4605      	mov	r5, r0
 8003e44:	4608      	mov	r0, r1
 8003e46:	6023      	str	r3, [r4, #0]
 8003e48:	f7fd f83a 	bl	8000ec0 <_sbrk>
 8003e4c:	1c43      	adds	r3, r0, #1
 8003e4e:	d102      	bne.n	8003e56 <_sbrk_r+0x1a>
 8003e50:	6823      	ldr	r3, [r4, #0]
 8003e52:	b103      	cbz	r3, 8003e56 <_sbrk_r+0x1a>
 8003e54:	602b      	str	r3, [r5, #0]
 8003e56:	bd38      	pop	{r3, r4, r5, pc}
 8003e58:	20000184 	.word	0x20000184

08003e5c <__malloc_lock>:
 8003e5c:	4770      	bx	lr

08003e5e <__malloc_unlock>:
 8003e5e:	4770      	bx	lr

08003e60 <_malloc_usable_size_r>:
 8003e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e64:	1f18      	subs	r0, r3, #4
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	bfbc      	itt	lt
 8003e6a:	580b      	ldrlt	r3, [r1, r0]
 8003e6c:	18c0      	addlt	r0, r0, r3
 8003e6e:	4770      	bx	lr

08003e70 <_init>:
 8003e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e72:	bf00      	nop
 8003e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e76:	bc08      	pop	{r3}
 8003e78:	469e      	mov	lr, r3
 8003e7a:	4770      	bx	lr

08003e7c <_fini>:
 8003e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7e:	bf00      	nop
 8003e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e82:	bc08      	pop	{r3}
 8003e84:	469e      	mov	lr, r3
 8003e86:	4770      	bx	lr
